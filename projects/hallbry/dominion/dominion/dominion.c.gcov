        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:37
        -:    0:Programs:33
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    20985:    8:int compare(const void* a, const void* b) {
    20985:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    20985:   11:  if (*(int*)a < *(int*)b)
     5596:   12:    return -1;
    15389:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      692:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      692:   44:  SelectStream(1);
      692:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      692:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      692:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     7612:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    76120:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    69200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      692:   73:  if (numPlayers == 2)
        -:   74:    {
      680:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       12:   77:  else if (numPlayers == 3)
        -:   78:    {
        9:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        3:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      692:   87:  if (numPlayers == 2)
        -:   88:    {
      680:   89:      state->supplyCount[estate] = 8;
      680:   90:      state->supplyCount[duchy] = 8;
      680:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       12:   95:      state->supplyCount[estate] = 12;
       12:   96:      state->supplyCount[duchy] = 12;
       12:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      692:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      692:  102:  state->supplyCount[silver] = 40;
      692:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    14532:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   114180:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   107260:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     6920:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2712:  115:		  if (numPlayers == 2){ 
     1348:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        8:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     5564:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     6920:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   100340:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     2091:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1399:  140:      state->deckCount[i] = 0;
     5596:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     4197:  143:	  state->deck[i][j] = estate;
     4197:  144:	  state->deckCount[i]++;
        -:  145:	}
    11192:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     9793:  148:	  state->deck[i][j] = copper;
     9793:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     2091:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1399:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     2091:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1399:  166:      state->handCount[i] = 0;
     1399:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    19376:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    18684:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      692:  182:  state->outpostPlayed = 0;
      692:  183:  state->phase = 0;
      692:  184:  state->numActions = 1;
      692:  185:  state->numBuys = 1;
      692:  186:  state->playedCardCount = 0;
      692:  187:  state->whoseTurn = 0;
      692:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     4152:  192:  for (it = 0; it < 5; it++){
     3460:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      692:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      692:  198:  return 0;
        -:  199:}
        -:  200:
     1418:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1418:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1418:  209:  if (state->deckCount[player] < 1)
       19:  210:    return -1;
     1399:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    16788:  214:  while (state->deckCount[player] > 0) {
    13990:  215:    card = floor(Random() * state->deckCount[player]);
    13990:  216:    newDeck[newDeckPos] = state->deck[player][card];
    13990:  217:    newDeckPos++;
    52922:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    38932:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    13990:  221:    state->deckCount[player]--;
        -:  222:  }
    15389:  223:  for (i = 0; i < newDeckPos; i++) {
    13990:  224:    state->deck[player][i] = newDeck[i];
    13990:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1399:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       60:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       60:  326:  int count = 0;
        -:  327:
      285:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      225:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
      210:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
      150:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
      210:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
      150:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       60:  343:  return count;
        -:  344:}
        -:  345:
       96:  346:int whoseTurn(struct gameState *state) {
       96:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
       80:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       80:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        5:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       75:  401:  j = 0;
     1950:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     1875:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      375:  406:	  j++;
        -:  407:	}
        -:  408:    }
       75:  409:  if ( j >= 3)
        -:  410:    {
       50:  411:      return 1;
        -:  412:    }
        -:  413:
       25:  414:  return 0;
        -:  415:}
        -:  416:
      208:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      208:  420:  int score = 0;
        -:  421:  //score from hand
      636:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        -:  424:		//printf("Player has this many cards in hand%d\n", state->handCount[player]);
      428:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
      428:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
      428:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
      428:  428:      if (state->hand[player][i] == province) { score = score + 6; };
      428:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      428:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
      388:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
        -:  436:		//printf("Player has this many discard cards %d\n", state->discardCount[player]);
      180:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
      180:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
      180:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
      180:  440:      if (state->discard[player][i] == province) { score = score + 6; };
      180:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      180:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
      388:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
        -:  448:		//printf("Player has this many cards in the deck%d\n", state->deckCount[player]);
      180:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
      180:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
      180:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
      180:  452:      if (state->deck[player][i] == province) { score = score + 6; };
      180:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      180:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
      208:  457:  return score;
        -:  458:}
        -:  459:
       24:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
      120:  467:	for (i = 0; i < MAX_PLAYERS; i++)    {
        -:  468:		//set unused player scores to -9999
       96:  469:		if (i >= state->numPlayers)	{
    #####:  470:			players[i] = -9999;
        -:  471:		}
        -:  472:		else	{
       96:  473:			players[i] = scoreFor (i, state);
        -:  474:			
        -:  475:		}
        -:  476:	}
        -:  477:
        -:  478:  //find highest score
       24:  479:  j = 0;
      120:  480:  for (i = 0; i < MAX_PLAYERS; i++)    {
       96:  481:      if (players[i] > players[j])	{
    #####:  482:		j = i;
        -:  483:		}	
        -:  484:    }
       24:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
       24:  488:  currentPlayer = whoseTurn(state);
      120:  489:  for (i = 0; i < MAX_PLAYERS; i++){
       96:  490:      if ( players[i] == highScore && i > currentPlayer ){
       36:  491:	  players[i]++;
        -:  492:	}
        -:  493:   }
        -:  494:
        -:  495:  //find new highest score
       24:  496:  j = 0;
      120:  497:  for (i = 0; i < MAX_PLAYERS; i++){
        -:  498:    
       96:  499:	if ( players[i] > players[j] ){
       18:  500:		j = i;
        -:  501:	}
        -:  502:    }
       24:  503:  highScore = players[j];
        -:  504:
        -:  505:  //set winners in array to 1 and rest to 0
      120:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
       96:  508:      if ( players[i] == highScore )
        -:  509:	{
       51:  510:	  players[i] = 1;
        -:  511:	}
        -:  512:      else
        -:  513:	{
       45:  514:	  players[i] = 0;
        -:  515:	}
        -:  516:    }
        -:  517:
       24:  518:  return 0;
        -:  519:}
        -:  520:
        -:  521:
        -:  522:
        -:  523:
        -:  524:
     3556:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     3556:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       11:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       11:  538:    state->deckCount[player] = state->discardCount[player];
       11:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       11:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       11:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       11:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       11:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       11:  559:    if (deckCounter == 0)
       11:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     3545:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     3545:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3545:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3545:  576:    state->deckCount[player]--;
     3545:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     3545:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       39:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       39:  653:  int currentPlayer = whoseTurn(state);
       39:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       39:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       39:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       39:  660:  int z = 0;// this is the counter for the temp hand
       39:  661:  if (nextPlayer > (state->numPlayers - 1)){
        9:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       39:  667:  switch( card ) 
        -:  668:		{
        -:  669:		case adventurer:
        -:  670:		  
       12:  671:		  return playAdventurer(state);
        -:  672:				
        -:  673:		case council_room:
    #####:  674:			return playCouncil_Room(state, handPos);
        -:  675:				
        -:  676:		case feast:
        -:  677:		  //gain card with cost up to 5
        -:  678:		  //Backup hand
    #####:  679:		  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  682:		  }
        -:  683:		  //Backup hand
        -:  684:
        -:  685:		  //Update Coins for Buy
    #####:  686:		  updateCoins(currentPlayer, state, 5);
    #####:  687:		  x = 1;//Condition to loop on
    #####:  688:		  while( x == 1) {//Buy one card
    #####:  689:		if (supplyCount(choice1, state) <= 0){
        -:  690:		  if (DEBUG)
        -:  691:			printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:		  if (DEBUG){
        -:  694:			printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:		  }
        -:  696:		}
    #####:  697:		else if (state->coins < getCost(choice1)){
    #####:  698:		  printf("That card is too expensive!\n");
        -:  699:
        -:  700:		  if (DEBUG){
        -:  701:			printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:		  }
        -:  703:		}
        -:  704:		else{
        -:  705:
        -:  706:		  if (DEBUG){
        -:  707:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  708:		  }
        -:  709:
    #####:  710:		  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  711:		  x = 0;//No more buying cards
        -:  712:
        -:  713:		  if (DEBUG){
        -:  714:			printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:		  }
        -:  716:
        -:  717:		}
        -:  718:		  }     
        -:  719:
        -:  720:		  //Reset Hand
    #####:  721:		  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  722:		state->hand[currentPlayer][i] = temphand[i];
    #####:  723:		temphand[i] = -1;
        -:  724:		  }
        -:  725:		  //Reset Hand
        -:  726:					
    #####:  727:		  return 0;
        -:  728:				
        -:  729:		case gardens:
    #####:  730:		  return -1;
        -:  731:				
        -:  732:		case mine:
    #####:  733:		  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  734:
    #####:  735:		  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  736:		{
    #####:  737:		  return -1;
        -:  738:		}
        -:  739:			
    #####:  740:		  if (choice2 > treasure_map || choice2 < curse)
        -:  741:		{
    #####:  742:		  return -1;
        -:  743:		}
        -:  744:
    #####:  745:		  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  746:		{
    #####:  747:		  return -1;
        -:  748:		}
        -:  749:
    #####:  750:		  gainCard(choice2, state, 2, currentPlayer);
        -:  751:
        -:  752:		  //discard card from hand
    #####:  753:		  discardCard(handPos, currentPlayer, state, 0);
        -:  754:
        -:  755:		  //discard trashed card
    #####:  756:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  757:		{
    #####:  758:		  if (state->hand[currentPlayer][i] == j)
        -:  759:			{
    #####:  760:			  discardCard(i, currentPlayer, state, 0);			
    #####:  761:			  break;
        -:  762:			}
        -:  763:		}
        -:  764:				
    #####:  765:		  return 0;
        -:  766:				
        -:  767:		case remodel:
    #####:  768:		  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  769:
    #####:  770:		  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  771:		{
    #####:  772:		  return -1;
        -:  773:		}
        -:  774:
    #####:  775:		  gainCard(choice2, state, 0, currentPlayer);
        -:  776:
        -:  777:		  //discard card from hand
    #####:  778:		  discardCard(handPos, currentPlayer, state, 0);
        -:  779:
        -:  780:		  //discard trashed card
    #####:  781:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  782:		{
    #####:  783:		  if (state->hand[currentPlayer][i] == j)
        -:  784:			{
    #####:  785:			  discardCard(i, currentPlayer, state, 0);			
    #####:  786:			  break;
        -:  787:			}
        -:  788:		}
        -:  789:
        -:  790:
    #####:  791:		  return 0;
        -:  792:			
        -:  793:		case smithy:
        9:  794:		  return playSmithy(state, handPos);
        -:  795:			
        -:  796:		case village:
       12:  797:		  return playVillage(state, handPos);
        -:  798:			
        -:  799:		case baron:
    #####:  800:		  state->numBuys++;//Increase buys by 1!
    #####:  801:		  if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  802:		int p = 0;//Iterator for hand!
    #####:  803:		int card_not_discarded = 1;//Flag for discard set!
    #####:  804:		while(card_not_discarded){
    #####:  805:		  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  806:			state->coins += 4;//Add 4 coins to the amount of coins
    #####:  807:			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  808:			state->discardCount[currentPlayer]++;
    #####:  809:			for (;p < state->handCount[currentPlayer]; p++){
    #####:  810:			  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  811:			}
    #####:  812:			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  813:			state->handCount[currentPlayer]--;
    #####:  814:			card_not_discarded = 0;//Exit the loop
        -:  815:		  }
    #####:  816:		  else if (p > state->handCount[currentPlayer]){
        -:  817:			if(DEBUG) {
        -:  818:			  printf("No estate cards in your hand, invalid choice\n");
        -:  819:			  printf("Must gain an estate if there are any\n");
        -:  820:			}
    #####:  821:			if (supplyCount(estate, state) > 0){
    #####:  822:			  gainCard(estate, state, 0, currentPlayer);
    #####:  823:			  state->supplyCount[estate]--;//Decrement estates
    #####:  824:			  if (supplyCount(estate, state) == 0){
    #####:  825:			isGameOver(state);
        -:  826:			  }
        -:  827:			}
    #####:  828:			card_not_discarded = 0;//Exit the loop
        -:  829:		  }
        -:  830:					
        -:  831:		  else{
    #####:  832:			p++;//Next card
        -:  833:		  }
        -:  834:		}
        -:  835:		  }
        -:  836:					
        -:  837:		  else{
    #####:  838:		if (supplyCount(estate, state) > 0){
    #####:  839:		  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  840:		  state->supplyCount[estate]--;//Decrement Estates
    #####:  841:		  if (supplyCount(estate, state) == 0){
    #####:  842:			isGameOver(state);
        -:  843:		  }
        -:  844:		}
        -:  845:		  }
        -:  846:			
        -:  847:		  
    #####:  848:		  return 0;
        -:  849:			
        -:  850:		case great_hall:
        -:  851:		  //+1 Card
        6:  852:		  drawCard(currentPlayer, state);
        -:  853:				
        -:  854:		  //+1 Actions
        6:  855:		  state->numActions++;
        -:  856:				
        -:  857:		  //discard card from hand
        6:  858:		  discardCard(handPos, currentPlayer, state, 0);
        6:  859:		  return 0;
        -:  860:			
        -:  861:		case minion:
        -:  862:		  //+1 action
    #####:  863:		  state->numActions++;
        -:  864:				
        -:  865:		  //discard card from hand
    #####:  866:		  discardCard(handPos, currentPlayer, state, 0);
        -:  867:				
    #####:  868:		  if (choice1)		//+2 coins
        -:  869:		{
    #####:  870:		  state->coins = state->coins + 2;
        -:  871:		}
        -:  872:				
    #####:  873:		  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  874:		{
        -:  875:		  //discard hand
    #####:  876:		  while(numHandCards(state) > 0)
        -:  877:			{
    #####:  878:			  discardCard(handPos, currentPlayer, state, 0);
        -:  879:			}
        -:  880:					
        -:  881:		  //draw 4
    #####:  882:		  for (i = 0; i < 4; i++)
        -:  883:			{
    #####:  884:			  drawCard(currentPlayer, state);
        -:  885:			}
        -:  886:					
        -:  887:		  //other players discard hand and redraw if hand size > 4
    #####:  888:		  for (i = 0; i < state->numPlayers; i++)
        -:  889:			{
    #####:  890:			  if (i != currentPlayer)
        -:  891:			{
    #####:  892:			  if ( state->handCount[i] > 4 )
        -:  893:				{
        -:  894:				  //discard hand
    #####:  895:				  while( state->handCount[i] > 0 )
        -:  896:				{
    #####:  897:				  discardCard(handPos, i, state, 0);
        -:  898:				}
        -:  899:								
        -:  900:				  //draw 4
    #####:  901:				  for (j = 0; j < 4; j++)
        -:  902:				{
    #####:  903:				  drawCard(i, state);
        -:  904:				}
        -:  905:				}
        -:  906:			}
        -:  907:			}
        -:  908:					
        -:  909:		}
    #####:  910:		  return 0;
        -:  911:			
        -:  912:		case steward:
        -:  913:		  
        -:  914:		  
        -:  915:		  
    #####:  916:		  return playSteward(state, choice1, choice2, choice3, handPos);
        -:  917:			
        -:  918:		case tribute:
    #####:  919:		  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  920:		if (state->deckCount[nextPlayer] > 0){
    #####:  921:		  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  922:		  state->deckCount[nextPlayer]--;
        -:  923:		}
    #####:  924:		else if (state->discardCount[nextPlayer] > 0){
    #####:  925:		  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  926:		  state->discardCount[nextPlayer]--;
        -:  927:		}
        -:  928:		else{
        -:  929:		  //No Card to Reveal
        -:  930:		  if (DEBUG){
        -:  931:			printf("No cards to reveal\n");
        -:  932:		  }
        -:  933:		}
        -:  934:		  }
        -:  935:			
        -:  936:		  else{
    #####:  937:		if (state->deckCount[nextPlayer] == 0){
    #####:  938:		  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  939:			state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  940:			state->deckCount[nextPlayer]++;
    #####:  941:			state->discard[nextPlayer][i] = -1;
    #####:  942:			state->discardCount[nextPlayer]--;
        -:  943:		  }
        -:  944:					
    #####:  945:		  shuffle(nextPlayer,state);//Shuffle the deck
        -:  946:		} 
    #####:  947:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  948:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  949:		state->deckCount[nextPlayer]--;
    #####:  950:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  951:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  952:		state->deckCount[nextPlayer]--;
        -:  953:		  }    
        -:  954:				   
    #####:  955:		  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  956:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  957:		state->playedCardCount++;
    #####:  958:		tributeRevealedCards[1] = -1;
        -:  959:		  }
        -:  960:
    #####:  961:		  for (i = 0; i <= 2; i ++){
    #####:  962:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  963:		  state->coins += 2;
        -:  964:		}
        -:  965:				
    #####:  966:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  967:		  drawCard(currentPlayer, state);
    #####:  968:		  drawCard(currentPlayer, state);
        -:  969:		}
        -:  970:		else{//Action Card
    #####:  971:		  state->numActions = state->numActions + 2;
        -:  972:		}
        -:  973:		  }
        -:  974:			
    #####:  975:		  return 0;
        -:  976:			
        -:  977:		case ambassador:
    #####:  978:		  j = 0;		//used to check if player has enough cards to discard
        -:  979:
    #####:  980:		  if (choice2 > 2 || choice2 < 0)
        -:  981:		{
    #####:  982:		  return -1;				
        -:  983:		}
        -:  984:
    #####:  985:		  if (choice1 == handPos)
        -:  986:		{
    #####:  987:		  return -1;
        -:  988:		}
        -:  989:
    #####:  990:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:		{
    #####:  992:		  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  993:			{
    #####:  994:			  j++;
        -:  995:			}
        -:  996:		}
    #####:  997:		  if (j < choice2)
        -:  998:		{
    #####:  999:		  return -1;				
        -: 1000:		}
        -: 1001:
        -: 1002:		  if (DEBUG) 
        -: 1003:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1004:
        -: 1005:		  //increase supply count for choosen card by amount being discarded
    #####: 1006:		  state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1007:				
        -: 1008:		  //each other player gains a copy of revealed card
    #####: 1009:		  for (i = 0; i < state->numPlayers; i++)
        -: 1010:		{
    #####: 1011:		  if (i != currentPlayer)
        -: 1012:			{
    #####: 1013:			  gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1014:			}
        -: 1015:		}
        -: 1016:
        -: 1017:		  //discard played card from hand
    #####: 1018:		  discardCard(handPos, currentPlayer, state, 0);			
        -: 1019:
        -: 1020:		  //trash copies of cards returned to supply
    #####: 1021:		  for (j = 0; j < choice2; j++)
        -: 1022:		{
    #####: 1023:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1024:			{
    #####: 1025:			  if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1026:			{
    #####: 1027:			  discardCard(i, currentPlayer, state, 1);
    #####: 1028:			  break;
        -: 1029:			}
        -: 1030:			}
        -: 1031:		}			
        -: 1032:
    #####: 1033:		  return 0;
        -: 1034:			
        -: 1035:		case cutpurse:
        -: 1036:
    #####: 1037:		  updateCoins(currentPlayer, state, 2);
    #####: 1038:		  for (i = 0; i < state->numPlayers; i++)
        -: 1039:		{
    #####: 1040:		  if (i != currentPlayer)
        -: 1041:			{
    #####: 1042:			  for (j = 0; j < state->handCount[i]; j++)
        -: 1043:			{
    #####: 1044:			  if (state->hand[i][j] == copper)
        -: 1045:				{
    #####: 1046:				  discardCard(j, i, state, 0);
    #####: 1047:				  break;
        -: 1048:				}
    #####: 1049:			  if (j == state->handCount[i])
        -: 1050:				{
    #####: 1051:				  for (k = 0; k < state->handCount[i]; k++)
        -: 1052:				{
        -: 1053:				  if (DEBUG)
        -: 1054:					printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1055:				}	
    #####: 1056:				  break;
        -: 1057:				}		
        -: 1058:			}
        -: 1059:						
        -: 1060:			}
        -: 1061:					
        -: 1062:		}				
        -: 1063:
        -: 1064:		  //discard played card from hand
    #####: 1065:		  discardCard(handPos, currentPlayer, state, 0);			
        -: 1066:
    #####: 1067:		  return 0;
        -: 1068:
        -: 1069:			
        -: 1070:		case embargo: 
        -: 1071:		  //+2 Coins
    #####: 1072:		  state->coins = state->coins + 2;
        -: 1073:				
        -: 1074:		  //see if selected pile is in play
    #####: 1075:		  if ( state->supplyCount[choice1] == -1 )
        -: 1076:		{
    #####: 1077:		  return -1;
        -: 1078:		}
        -: 1079:				
        -: 1080:		  //add embargo token to selected supply pile
    #####: 1081:		  state->embargoTokens[choice1]++;
        -: 1082:				
        -: 1083:		  //trash card
    #####: 1084:		  discardCard(handPos, currentPlayer, state, 1);		
    #####: 1085:		  return 0;
        -: 1086:			
        -: 1087:		case outpost:
        -: 1088:		  //set outpost flag
    #####: 1089:		  state->outpostPlayed++;
        -: 1090:				
        -: 1091:		  //discard card
    #####: 1092:		  discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:		  return 0;
        -: 1094:			
        -: 1095:		case salvager:
        -: 1096:		  //+1 buy
    #####: 1097:		  state->numBuys++;
        -: 1098:				
    #####: 1099:		  if (choice1)
        -: 1100:		{
        -: 1101:		  //gain coins equal to trashed card
    #####: 1102:		  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1103:		  //trash card
    #####: 1104:		  discardCard(choice1, currentPlayer, state, 1);	
        -: 1105:		}
        -: 1106:				
        -: 1107:		  //discard card
    #####: 1108:		  discardCard(handPos, currentPlayer, state, 0);
    #####: 1109:		  return 0;
        -: 1110:			
        -: 1111:		case sea_hag:
    #####: 1112:		  for (i = 0; i < state->numPlayers; i++){
    #####: 1113:		if (i != currentPlayer){
    #####: 1114:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1115:		  state->discardCount[i]++;
    #####: 1116:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1117:		}
        -: 1118:		  }
    #####: 1119:		  return 0;
        -: 1120:			
        -: 1121:		case treasure_map:
        -: 1122:		  //search hand for another treasure_map
    #####: 1123:		  index = -1;
    #####: 1124:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1125:		{
    #####: 1126:		  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1127:			{
    #####: 1128:			  index = i;
    #####: 1129:			  break;
        -: 1130:			}
        -: 1131:		}
    #####: 1132:		  if (index > -1)
        -: 1133:		{
        -: 1134:		  //trash both treasure cards
    #####: 1135:		  discardCard(handPos, currentPlayer, state, 1);
    #####: 1136:		  discardCard(index, currentPlayer, state, 1);
        -: 1137:
        -: 1138:		  //gain 4 Gold cards
    #####: 1139:		  for (i = 0; i < 4; i++)
        -: 1140:			{
    #####: 1141:			  gainCard(gold, state, 1, currentPlayer);
        -: 1142:			}
        -: 1143:					
        -: 1144:		  //return success
    #####: 1145:		  return 1;
        -: 1146:		}
        -: 1147:				
        -: 1148:		  //no second treasure_map found in hand
    #####: 1149:		  return -1;
        -: 1150:		}
        -: 1151:	
    #####: 1152:  return -1;
        -: 1153:}
        -: 1154:
       27: 1155:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1156:{
        -: 1157:	
        -: 1158:  //if card is not trashed, added to Played pile 
       27: 1159:  if (trashFlag < 1)
        -: 1160:    {
        -: 1161:      //add card to played pile
       27: 1162:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       27: 1163:      state->playedCardCount++;
        -: 1164:    }
        -: 1165:	
        -: 1166:  //set played card to -1
       27: 1167:  state->hand[currentPlayer][handPos] = -1;
        -: 1168:	
        -: 1169:  //remove card from player's hand
       27: 1170:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1171:    {
        -: 1172:      //reduce number of cards in hand
       12: 1173:      state->handCount[currentPlayer]--;
        -: 1174:    }
       15: 1175:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1176:    {
        -: 1177:      //reduce number of cards in hand
    #####: 1178:      state->handCount[currentPlayer]--;
        -: 1179:    }
        -: 1180:  else 	
        -: 1181:    {
        -: 1182:      //replace discarded card with last card in hand
       15: 1183:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1184:      //set last card to -1
       15: 1185:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1186:      //reduce number of cards in hand
       15: 1187:      state->handCount[currentPlayer]--;
        -: 1188:    }
        -: 1189:	
       27: 1190:  return 0;
        -: 1191:}
        -: 1192:
    #####: 1193:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1194:{
        -: 1195:  //Note: supplyPos is enum of choosen card
        -: 1196:	
        -: 1197:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1198:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1199:    {
    #####: 1200:      return -1;
        -: 1201:    }
        -: 1202:	
        -: 1203:  //added card for [whoseTurn] current player:
        -: 1204:  // toFlag = 0 : add to discard
        -: 1205:  // toFlag = 1 : add to deck
        -: 1206:  // toFlag = 2 : add to hand
        -: 1207:
    #####: 1208:  if (toFlag == 1)
        -: 1209:    {
    #####: 1210:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1211:      state->deckCount[player]++;
        -: 1212:    }
    #####: 1213:  else if (toFlag == 2)
        -: 1214:    {
    #####: 1215:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1216:      state->handCount[player]++;
        -: 1217:    }
        -: 1218:  else
        -: 1219:    {
    #####: 1220:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1221:      state->discardCount[player]++;
        -: 1222:    }
        -: 1223:	
        -: 1224:  //decrease number in supply pile
    #####: 1225:  state->supplyCount[supplyPos]--;
        -: 1226:	 
    #####: 1227:  return 0;
        -: 1228:}
        -: 1229:
     3998: 1230:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1231:{
        -: 1232:  int i;
        -: 1233:	
        -: 1234:  //reset coin count
     3998: 1235:  state->coins = 0;
        -: 1236:
        -: 1237:  //add coins for each Treasure card in player's hand
    17400: 1238:  for (i = 0; i < state->handCount[player]; i++)
        -: 1239:    {
    13402: 1240:      if (state->hand[player][i] == copper)
        -: 1241:	{
     4784: 1242:	  state->coins += 1;
        -: 1243:	}
     8618: 1244:      else if (state->hand[player][i] == silver)
        -: 1245:	{
     1980: 1246:	  state->coins += 2;
        -: 1247:	}
     6638: 1248:      else if (state->hand[player][i] == gold)
        -: 1249:	{
     3300: 1250:	  state->coins += 3;
        -: 1251:	}	
        -: 1252:    }	
        -: 1253:
        -: 1254:  //add bonus
     3998: 1255:  state->coins += bonus;
        -: 1256:
     3998: 1257:  return 0;
        -: 1258:}
       12: 1259:int playAdventurer(struct gameState *state){	
        -: 1260:	
       12: 1261:	int currentPlayer = whoseTurn(state);		
        -: 1262:	int temphand[MAX_HAND];// moved above the if statement
       12: 1263:	int drawntreasure=0;
        -: 1264:	int cardDrawn;
       12: 1265:	int z = 0;// this is the counter for the temp hand
       48: 1266:	while(drawntreasure<2){
        -: 1267:		
       24: 1268:			if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        8: 1269:			  shuffle(currentPlayer, state);
        -: 1270:			  //printf("Shuffling\n");
        -: 1271:			}
       24: 1272:			drawCard(currentPlayer, state);
       24: 1273:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       24: 1274:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       24: 1275:			  drawntreasure++;
        -: 1276:			else{
    #####: 1277:			  temphand[z]=cardDrawn;
    #####: 1278:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1279:			  z++;
        -: 1280:			}
        -: 1281:	}
       48: 1282:	while(z+1>=0){
       24: 1283:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       24: 1284:		z=z-1;
        -: 1285:	  }
       12: 1286:	return 0; 
        -: 1287:}
        -: 1288:
        9: 1289:int playSmithy(struct gameState *state, int handPos){
        9: 1290:	int currentPlayer = whoseTurn(state);	
        -: 1291:	//+3 Cards
        -: 1292:	int i;
       63: 1293:      for (i = 0; i < 6; i++){
       54: 1294:		  drawCard(currentPlayer, state);
        -: 1295:			//printf("adding card\n");
        -: 1296:		}
        -: 1297:			
        -: 1298:      //discard card from hand
        9: 1299:      discardCard(handPos, currentPlayer, state, 0);
        -: 1300:	
        -: 1301:	
        9: 1302:	return 0; 
        -: 1303:}
        -: 1304:
        -: 1305:
    #####: 1306:int playSteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -: 1307:{
    #####: 1308:	int currentPlayer = whoseTurn(state);	
    #####: 1309:	if (choice1 <= 1)
        -: 1310:	{
        -: 1311:	  //+2 cards
    #####: 1312:	  drawCard(currentPlayer, state);
    #####: 1313:	  drawCard(currentPlayer, state);
        -: 1314:	}
    #####: 1315:      else if (choice1 != 2)
        -: 1316:	{
        -: 1317:	  //+2 coins
    #####: 1318:	  state->coins = state->coins + 2;
        -: 1319:	}
        -: 1320:      else
        -: 1321:	{
        -: 1322:	  //trash 2 cards in hand
    #####: 1323:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1324:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1325:	}
        -: 1326:			
        -: 1327:      //discard card from hand
    #####: 1328:      discardCard(handPos, currentPlayer, state, 0);
        -: 1329:	  
    #####: 1330:	  return 0; 
        -: 1331:}
        -: 1332:	  
    #####: 1333:int playCouncil_Room(struct gameState *state, int handPos){
        -: 1334:	int i;
    #####: 1335:	int currentPlayer = whoseTurn(state);	
        -: 1336:	//+4 Cards
    #####: 1337:      for (i = 1; i < 8; i++)
        -: 1338:	{
    #####: 1339:	  drawCard(currentPlayer, state);
        -: 1340:	}
        -: 1341:			
        -: 1342:      //+1 Buy
    #####: 1343:      state->numBuys++;
        -: 1344:			
        -: 1345:      //Each other player draws a card
    #####: 1346:      for (i = 0; i < state->numPlayers; i++)
        -: 1347:	{
    #####: 1348:	  if ( i != currentPlayer )
        -: 1349:	    {
    #####: 1350:	      drawCard(i, state);
        -: 1351:	    }
        -: 1352:	}
        -: 1353:			
        -: 1354:      //put played card in played card pile
    #####: 1355:      discardCard(handPos, currentPlayer, state, 0);
        -: 1356:	
        -: 1357:	
    #####: 1358:	return 0;
        -: 1359:}	  
        -: 1360:
       12: 1361:int playVillage(struct gameState *state, int handPos){	
        -: 1362:	
       12: 1363:	int currentPlayer = whoseTurn(state);		
        -: 1364:	//+1 Card
        -: 1365:	  
       12: 1366:      drawCard(currentPlayer, state);
        -: 1367:      //+2 Actions
        -: 1368:
       12: 1369:      state->numActions = state->numActions + 2;
        -: 1370:			
        -: 1371:      //discard played card from hand
       12: 1372:      discardCard(handPos, currentPlayer, state, 0);
        -: 1373:      
        -: 1374:	
        -: 1375:	
       12: 1376:	return 0;
        -: 1377:}
        -: 1378:
        -: 1379:
        -: 1380://end of dominion.c
        -: 1381:
