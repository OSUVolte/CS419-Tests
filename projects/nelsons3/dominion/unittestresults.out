

Test creation of new games.
only one will run at a time but 1000 will be created.
Unit test 1.

unit Test 1 Passed 
File 'unittest1.c'
Lines executed:100.00% of 10
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <math.h>
        -:    4:#include <time.h>
        -:    5:#include "assert.h"
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:
        1:   10:int main(int argc, char* argv[])
        -:   11:{
        -:   12:	int counter;
        1:   13:	printf("\n\nTest creation of new games.\n");
        1:   14:	printf("only one will run at a time but 1000 will be created.\n");
        1:   15:	printf("Unit test 1.\n");
        -:   16:	//heres our simple test...create the game struct as shown on 
        -:   17:	//line 16 of dominion.c and then make sure the game actually exists!
     1001:   18:	for (counter = 0; counter < 1000; counter++) 
        -:   19:	{
     1000:   20:		struct gameState *g = newGame();
     1000:   21:		assert(g != NULL);
     1000:   22:		free(g);
        -:   23:	}
        1:   24:	printf("\nunit Test 1 Passed \n");
        1:   25:return 0;
        -:   26:}


Whos turn test
whose turn - player number: 2 
whose turn - player number: 3 
whose turn - player number: 4 

Unit test 2 passed. 
File 'unittest2.c'
Lines executed:100.00% of 11
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <math.h>
        -:    4:#include <time.h>
        -:    5:
        -:    6:#include "assert.h"
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include "rngs.h"
        -:   10:
        1:   11:int main(int argc, char* argv[])
        -:   12:{
        -:   13:    int counter;
        -:   14:    int startOfGame;
        1:   15:    int k[10] = {adventurer, embargo, great_hall, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   16:    struct gameState game;
        -:   17:    
        1:   18:    printf("\n\nWhos turn test\n");
        4:   19:    for(counter = 2; counter<= 4; counter++)
        -:   20:    {
        -:   21://create game and assert it is running, then check to find out whos turn it is
        3:   22:        startOfGame = initializeGame(counter, k, 10, &game);
        3:   23:        assert(startOfGame == 0);
        3:   24:        startOfGame = whoseTurn(&game);
        3:   25:        assert(startOfGame == game.whoseTurn);
        3:   26:        printf("whose turn - player number: %d \n", counter);
        -:   27:    }
        1:   28:    printf("\nUnit test 2 passed. \n");
        1:   29:return 0;
        -:   30:}


testing getCost() method.

test estate points firstTest Estate points first
Curse value passedestate value passedduchy value passedprovince value passed
test monies next
copper value passedsilver value passedgold value passed
test playcards last
adventurer value passedcouncil_room value passedfeast value passedgardens value passedmine value passedremodel value passedsmithy value passedvillage value passedbaron value passedgreat_hall value passedminion value passedsteward value passedtribute value passedambassador value passedcutpurse value passedembargo value passedsalvager value passedsea_hag value passedtreasure_map value passed
Unit test 3 passed. 
File 'unittest3.c'
Lines executed:98.39% of 62
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <assert.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:
        -:    7://Test case for getCost(int)
        1:    8:int main() 
        -:    9:{
        1:   10:	printf("\n\ntesting getCost() method.\n\n");
        1:   11:    printf("test estate points first");
        1:   12:    printf("Test Estate points first\n");   
        1:   13:    if(getCost(curse)==0)
        1:   14:        printf("Curse value passed");
        1:   15:    if(getCost(estate)==2)
        1:   16:        printf("estate value passed");
        1:   17:    if(getCost(duchy)==5)
        1:   18:        printf("duchy value passed");
        1:   19:    if(getCost(province)==8)
        1:   20:        printf("province value passed");   
        1:   21:    printf("\ntest monies next\n");
        1:   22:    if(getCost(copper)==0)
        1:   23:        printf("copper value passed");
        1:   24:    if(getCost(silver)==3)
        1:   25:        printf("silver value passed");
        1:   26:    if(getCost(gold)==6)
        1:   27:        printf("gold value passed");
        1:   28:    printf("\ntest playcards last\n");
        1:   29:    if(getCost(adventurer)==6)
        1:   30:        printf("adventurer value passed"); 
        1:   31:    if(getCost(council_room)==5)
        1:   32:        printf("council_room value passed");
        1:   33:    if(getCost(feast)==4)
        1:   34:        printf("feast value passed");
        1:   35:    if(getCost(gardens)==4)
        1:   36:        printf("gardens value passed");
        1:   37:    if(getCost(mine)==5)
        1:   38:        printf("mine value passed");   
        1:   39:    if(getCost(remodel)==4)
        1:   40:        printf("remodel value passed");
        1:   41:    if(getCost(smithy)==4)
        1:   42:        printf("smithy value passed");
        1:   43:    if(getCost(village)==3)
        1:   44:        printf("village value passed");
        1:   45:    if(getCost(baron)==4)
        1:   46:        printf("baron value passed");    
        1:   47:    if(getCost(great_hall)==3)
        1:   48:        printf("great_hall value passed");
        1:   49:    if(getCost(minion)==5)
        1:   50:        printf("minion value passed"); 
        1:   51:    if(getCost(steward)==3)
        1:   52:        printf("steward value passed");
        1:   53:    if(getCost(tribute)==5)
        1:   54:        printf("tribute value passed");
        1:   55:    if(getCost(ambassador)==3)
        1:   56:        printf("ambassador value passed");
        1:   57:    if(getCost(cutpurse)==4)
        1:   58:        printf("cutpurse value passed");   
        1:   59:    if(getCost(embargo)==2)
        1:   60:        printf("embargo value passed");
        1:   61:    if(getCost(outpost)==2)
    #####:   62:        printf("outpost value passed");
        1:   63:    if(getCost(salvager)==4)
        1:   64:        printf("salvager value passed");
        1:   65:    if(getCost(sea_hag)==4)
        1:   66:        printf("sea_hag value passed");        
        1:   67:    if(getCost(treasure_map)==4)
        1:   68:        printf("treasure_map value passed"); 
        -:   69:
        1:   70:    printf("\nUnit test 3 passed. \n");
        1:   71:return 0;
        -:   72:}


testing isGameOver
game ends when all provinces are gone
supply pile Win Condition properly returned as true 

Unit test 4 passed. 
File 'unittest4.c'
Lines executed:81.25% of 16
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:
        1:    7:int main()
        -:    8:{
        1:    9:	 printf("\n\ntesting isGameOver\n");
        -:   10:	int counter;
        1:   11:	struct gameState *state = malloc(sizeof(struct gameState));
        -:   12://no more province cards ends the game
        -:   13://set provinces == 0 then test for running game
        1:   14:	state->supplyCount[province] = 0 ; 
        1:   15:	if( isGameOver(state) == 1 )
        -:   16:    {
        1:   17:		printf("game ends when all provinces are gone\n");
    #####:   18:	} else if ( isGameOver(state) == 0 ){
    #####:   19:		printf("error->isGameOver: no provinces available but game still running\n");
        -:   20:	}
        -:   21://game also ends when 3 supply piles are consumed 
        -:   22://set the supply count to 3 then test for running game
        4:   23:	for (counter = 0; counter < 3 ; counter++)
        -:   24:    {
        3:   25:		state->supplyCount[counter] = 0;
        -:   26:	} 
        1:   27:	if( isGameOver(state) == 0 )
        -:   28:    {
    #####:   29:		printf("error->isGameOver: returned false with win condition\n");
        1:   30:	} else if (isGameOver(state) == 1){
        1:   31:		printf("supply pile Win Condition properly returned as true \n");
        -:   32:	}
        1:   33:	printf("\nUnit test 4 passed. \n");
        1:   34:return 0;
        -:   35:}


Running Unit Test: Smithy
Current Hand: 5 

Smithy played for first player. 

error: Hands don't match. test: 7. returned: 6 

unit Test: Smithy test successful 
File 'cardtest1.c'
Lines executed:92.31% of 13
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        1:    8:int main(){
        -:    9:	int effect, handCount;
        -:   10:	struct gameState game;	
        1:   11:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   12:    
        1:   13:	printf("\n\nRunning Unit Test: Smithy\n");
        -:   14://create game
        -:   15://4 players, cards, seed, 
        1:   16:	initializeGame(4, k, 10, &game);
        1:   17:	handCount = game.handCount[0] + 2;
        1:   18:	printf("Current Hand: %d \n", game.handCount[0]);	
        -:   19://line 646 dominion.c
        -:   20://pass card (smithy since we are testing it), choice1-3, struct gameState, the handPos and the bonus (which we have none yet)
        1:   21:	effect = cardEffect(smithy, 0, 0, 0, &game, 0, 0);
        1:   22:	printf("\nSmithy played for first player. \n\n");
        1:   23:	if(game.handCount[0] != handCount)
        -:   24:    {
        1:   25:		printf("error: Hands don't match. test: %d. returned: %d \n", handCount, game.handCount[0]);
        -:   26:	}
        -:   27:	else{
    #####:   28:		printf("Hand Count: %d \ntest successful: Card properly drawn.\n", game.handCount[0]);
        -:   29:	}
        1:   30:	printf("\nunit Test: Smithy test successful \n");
        1:   31:return 0;
        -:   32:}


Running Unit Test: Adventurer

starting hand count Player: 5

ending hand count Player: 9

unit Test: Adventurer test successful 
File 'cardtest2.c'
Lines executed:100.00% of 12
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <assert.h>
        -:    7:
        1:    8:int main () {
        -:    9:    struct gameState game;
        -:   10:    int newHand, oldHand;
        -:   11://    int randomSeed = rand();
        1:   12:    int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   13:                sea_hag, tribute, smithy};
        -:   14:
        1:   15:    printf("\n\nRunning Unit Test: Adventurer\n");
        -:   16://create game
        -:   17://4 players, cards, seed, game struct
        1:   18:    initializeGame(4, k, 10, &game);
        1:   19:    printf("\nstarting hand count Player: %d\n", game.handCount[0]);
        1:   20:    oldHand = game.handCount[0];
        -:   21://play card
        1:   22:    cardEffect(adventurer, 0, 0, 0, &game, 0, 0);
        1:   23:    printf("\nending hand count Player: %d\n", game.handCount[0]);
        1:   24:    newHand = game.handCount[0];
        1:   25:    assert(newHand = oldHand+2);
        1:   26:    printf("\nunit Test: Adventurer test successful \n");
        1:   27:return 0;
        -:   28:}


Running Unit Test: Gardens 

Card function properly returned -1. 

Unit Test: Gardens complete. 
File 'cardtest3.c'
Lines executed:100.00% of 10
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        1:    9:int main(){
        -:   10:	int i, r;
        -:   11:
        -:   12:	struct gameState state;
        -:   13:	
        1:   14:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   15:	
        1:   16:	printf("\n\nRunning Unit Test: Gardens \n");
        -:   17:	
        6:   18:	for(i = 0; i < 5; i++){
        -:   19:	
        5:   20:		initializeGame(i, k, 10, &state);
        5:   21:		r = cardEffect(gardens, 0, 0, 0, &state, 0, 0);
        5:   22:		assert(r == -1);
        -:   23:	}
        -:   24:	
        1:   25:	printf("\nCard function properly returned -1. \n");
        1:   26:	printf("\nUnit Test: Gardens complete. \n");
        -:   27:	
        1:   28:	return 0;
        -:   29:
        -:   30:}

testing council_room_card
hand count: 5, After card played: 7 (council room should increase the players hand by 4)
number of buys: 1, After card played number of buys: 2 (card increases buys by 1)
Player 2's amount of cards: 0, After player one plays council room:  1 (new should be 1 more)

All tests passed.

File 'cardtest4.c'
Lines executed:100.00% of 11
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        1:    9:int main() {
        1:   10:	printf("\ntesting council_room_card\n");
        -:   11:	struct gameState game, afterCard;
        1:   12:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   13://create game
        -:   14://4 players, cards, seed, game struct
        1:   15:	initializeGame(2, k, 10, &game);
        1:   16:	memcpy(&afterCard, &game, sizeof(struct gameState));
        1:   17:	playCouncil_Room(&afterCard, 1, 0);
        -:   18:	
        1:   19:	printf("hand count: %d, After card played: %d (council room should increase the players hand by 4)\n", game.handCount[0], afterCard.handCount[0]);
        1:   20:	printf("number of buys: %d, After card played number of buys: %d (card increases buys by 1)\n", game.numBuys, afterCard.numBuys);
        1:   21:	printf("Player 2's amount of cards: %d, After player one plays council room:  %d (new should be 1 more)\n", game.handCount[1], afterCard.handCount[1]);
        -:   22:
        1:   23:	printf("\nAll tests passed.\n\n");
        1:   24:return 0;
        -:   25:}
