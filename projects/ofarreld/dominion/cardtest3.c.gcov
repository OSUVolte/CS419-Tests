        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#include "testHelper.h"
        -:   10:
        -:   11:#define TESTCARD "Council Room"
        -:   12:
        -:   13:
        1:   14:int main() {
        1:   15:	int newCards = 0;
        1:   16:	int discarded = 1;
        1:   17:	int newCoins = 0;
        1:   18:	int shuffledCards = 0;
        -:   19:
        -:   20:	int a, b, c;
        1:   21:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   22:	int remove1, remove2;
        1:   23:	int seed = 1000;
        1:   24:	int numPlayers = 2;
        1:   25:	int thisPlayer = 0;
        1:   26:	int otherPlayer = 1;
        -:   27:
        -:   28:	struct gameState G, testG;
        1:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   30:		sea_hag, tribute, smithy, council_room};
        -:   31:	
        1:   32:	initializeGame(numPlayers, k, seed, &G);  
        1:   33:	printf("\t Testing Card: %s \n", TESTCARD);
        -:   34:	
        -:   35:	// Smithy Info: cost = +3 cards 	
        -:   36:
        -:   37:	// boot up the perfect version
        1:   38:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   39:	
        -:   40:	// Test 01 -----------------------------------------------------------------
        -:   41:	// Coints += $2 
        1:   42:	printf("Test 01: coins += 2, +1 buy \n");
        -:   43:	
        -:   44:	// setup test environment
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));	
        1:   46:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   47:
        -:   48:	// Test 01	
        1:   49:	newCoins = 0;
        1:   50:	newCards = 4;
        -:   51:	// add a buy to thisPlayer
        1:   52:	a = 1;
        -:   53:	// Other Player draws a card
        1:   54:	b = 1;
        1:   55:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], 
        1:   56:		G.handCount[thisPlayer] + newCards - discarded);
        1:   57:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], 
        1:   58:		G.handCount[thisPlayer] - newCards + shuffledCards);
        1:   59:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + newCoins);
        1:   60:	printf("Player Buys = %d, expected = %d\n", testG.numBuys, G.numBuys + a);	
        -:   61:
        1:   62:	if (testG.handCount[thisPlayer] != G.handCount[thisPlayer] + newCards- discarded) {
    #####:   63:		errorMessage("handCount does not match");
        -:   64:	}
        1:   65:	if (testG.deckCount[thisPlayer] != G.deckCount[thisPlayer] - newCards + shuffledCards){ 
    #####:   66:		errorMessage("deckCount does not match");
        -:   67:  	}
        1:   68:	if (testG.coins != G.coins + newCoins) {
    #####:   69:		errorMessage("coins do not match");
        -:   70:	}
        -:   71:	
        1:   72:	genericTest(G, testG, otherPlayer, b);
        -:   73:	
        1:   74:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   75:
        1:   76:  return 0;
        -:   77:}
        -:   78:
        -:   79:
