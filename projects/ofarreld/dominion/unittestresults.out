handCount: 5
	 Testing Card: updateCoinst 

-------------------------------------------
Test 01: one copper to hand
Testing coin with one copper in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 02: one silver to hand
Testing coin with one silver in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 03: one gold to hand
Testing coin with one silver in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 04: one gold to hand and -1 bonus
Testing coin with one silver in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete updateCoinst <<<<<

File 'unittest4.c'
Lines executed:88.73% of 71
Creating 'unittest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#include "testHelper.h"
        -:   10:
        -:   11:#define TESTCARD "Adventurer"
        -:   12:
        1:   13:int main() {
        1:   14:	int newCards = 0;
        1:   15:	int discarded = 1;
        1:   16:	int newCoins = 0;
        1:   17:	int shuffledCards = 0;
        -:   18:
        1:   19:	int a = 0, b = 0, c= 0;
        1:   20:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   21:	int remove1, remove2;
        1:   22:	int seed = 1000;
        1:   23:	int numPlayers = 2;
        1:   24:	int thisPlayer = 0;
        1:   25:	int otherPlayer = 1;
        -:   26:
        -:   27:	struct gameState G, testG;
        1:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   29:		sea_hag, tribute, smithy, council_room};
        -:   30:	
        1:   31:	initializeGame(numPlayers, k, seed, &G);  
        1:   32:	printf("\t Testing Card: %s \n", TESTCARD);
        -:   33:	
        -:   34:	// boot up the perfect version
        1:   35:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   36:	
        -:   37:	// Test 01 -----------------------------------------------------------------
        -:   38:	// Coints += $2 
        1:   39:	printf("Test 01: draw cards until 2 treasures are found \n");
        -:   40:	
        -:   41:	// setup test environment
        1:   42:	memcpy(&testG, &G, sizeof(struct gameState));	
        -:   43:
        -:   44:	// insert 2 gold coins into the first blank spaces in the deck
       14:   45:	while ((a < MAX_DECK) && (b < 2)) {
       12:   46:		if (testG.deck[thisPlayer][a] == 0) {
        2:   47:			testG.deck[thisPlayer][a] = gold;
        2:   48:			b++;
        -:   49:		}
       12:   50:		a++;	
        -:   51:	}
        -:   52:
        -:   53:
        1:   54:	printf("Player hand = %d\n", testG.handCount[thisPlayer]);
        -:   55:
        1:   56:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   57:
        -:   58:	// Test 01	
        1:   59:	newCoins = 0;
        1:   60:	newCards = 2;
        1:   61:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], 
        1:   62:		G.handCount[thisPlayer] + newCards - discarded);
        1:   63:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], 
        1:   64:		G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   65:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + newCoins);
        -:   66:
        1:   67:	if (testG.handCount[thisPlayer] != G.handCount[thisPlayer] + newCards- discarded) {
    #####:   68:		errorMessage("handCount does not match");
        -:   69:	}
        1:   70:	if (testG.deckCount[thisPlayer] != G.deckCount[thisPlayer] - newCards + shuffledCards){ 
    #####:   71:		errorMessage("deckCount does not match");
        -:   72:  	}
        1:   73:	if (testG.coins != G.coins + newCoins) {
    #####:   74:		errorMessage("coins do not match");
        -:   75:	}
        -:   76:	
        1:   77:	genericTest(G, testG, otherPlayer, c);
        -:   78:	
        1:   79:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   80:
        1:   81:  return 0;
        -:   82:}
        -:   83:
        -:   84:
