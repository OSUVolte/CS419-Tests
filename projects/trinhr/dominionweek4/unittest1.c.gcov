        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8://This is a unit test for the updateCoins() function.
        -:    9://Input: int player --> current player
        -:   10://	 struct gamestate
        -:   11://	 int bonus --> bonus coins
        -:   12://Business Rules:
        -:   13://1. It needs to count the number of treasure cards
        -:   14://in the players hand and return the correct number.
        -:   15://2. If there is a bonus, it needs to correctly add the bonus
        -:   16://to the number of coins.
        -:   17://3. The rest of the game state needs to remain unchanged.
        -:   18:
function main called 1 returned 100% blocks executed 79%
        1:   19:int main () {
        -:   20:
        -:   21:  struct gameState expected, actual;
        -:   22:  //Current Player
        1:   23:  int player = 1;
        -:   24:  //Number of Cards in Player's Hand.
        1:   25:  int handCount = 5;
        -:   26:
        -:   27:  //Initialize Player 1's Hand Count to 5
        1:   28:  expected.handCount[player] = handCount;
        -:   29:  //Initialize Player's Hand to five cards.
        1:   30:  expected.hand[player][0] = embargo;
        1:   31:  expected.hand[player][1] = copper;
        1:   32:  expected.hand[player][2] = village;
        1:   33:  expected.hand[player][3] = silver;
        1:   34:  expected.hand[player][4] = gold;
        -:   35: 
        1:   36:  int bonus = 3;
        1:   37:  int treasure_cards = 6;
        1:   38:  expected.coins = 0;
        -:   39:  
        -:   40:  //Set the expected Results.
        -:   41:  //Coins = Bonus + Silver(2) + Copper(1) + Gold(3).
        1:   42:  expected.coins = bonus + treasure_cards;
        1:   43:  int expected_coins = expected.coins;
        -:   44:
        -:   45:  //Copy the game state to the pre game state test case.
        1:   46:  memcpy(&actual, &expected, sizeof(struct gameState));
        -:   47:
        1:   48:  printf("EXPECTED COINS:%i  ACTUAL COINS:%i\n", expected.coins, actual.coins);
call    0 returned 100%
        1:   49:  assert(memcmp(&expected, &actual, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   50:  printf("Both EXPECTED & ACTUAL GAME STATES ARE EQUIVALENT before calling the function.\n");
call    0 returned 100%
        -:   51: 
        1:   52:  printf("---Testing UpdateCoins()-----\n");
call    0 returned 100%
        1:   53:  updateCoins(player, &actual, bonus);
call    0 returned 100%
        1:   54:  int actual_coins = actual.coins;
        -:   55:
        -:   56:  //Check if the rest of the game state is affected.
        1:   57:  actual.coins = expected.coins = 0;
        1:   58:  assert(memcmp(&expected, &actual, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   59:  printf("Both EXPECTED & ACTUAL game states are equivalent after calling the function.\n");  
call    0 returned 100%
        -:   60: 
        -:   61:  //Check if the function returned the correct number of coins.
        1:   62:  printf("EXPECTED COINS:%i  ACTUAL COINS:%i\n", expected_coins, actual_coins);
call    0 returned 100%
        1:   63:  assert(expected_coins == actual_coins);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   64:
        1:   65:  return 0;
        -:   66:
        -:   67:}
