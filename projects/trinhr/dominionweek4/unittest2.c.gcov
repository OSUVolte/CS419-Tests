        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8://This is a unit test for the discardCard function.
        -:    9://Input:
        -:   10://int handPos --> Pos of card in Player's Hand to be Discarded.
        -:   11://int currentPlayer -> whose hand it is.
        -:   12://struct gameState *state-> state of the game.
        -:   13://int trashFlag -> 0 = not trashed 1 = trashed.
        -:   14://Business Rules:
        -:   15://1. Current Player's hand count is decrememnted by 1.
        -:   16://2. The card trashed is no longer in the current player's hand.
        -:   17://3. Handle correctly when the player has one card.
        -:   18://4. Handle correctly when the player has multiple cards in hand.
function main called 1 returned 100% blocks executed 72%
        1:   19:int main () {
        -:   20:
        1:   21:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   22:	       remodel, smithy, village, baron, great_hall};
        -:   23:
        -:   24:  struct gameState expected, actual;
        1:   25:  int numPlayers = 2;
        1:   26:  int seed = 500;
        1:   27:  int player = 1;  
        -:   28:
        1:   29:  initializeGame(numPlayers, k, seed, &actual);
call    0 returned 100%
        -:   30:
        -:   31:  //Set Up Case
        1:   32:  int handPos = 0;
        1:   33:  int nottrashed = 0;  
        -:   34: 
        1:   35:  actual.handCount[player] = 1;
        1:   36:  actual.hand[player][0] = baron;
        1:   37:  actual.playedCardCount = 0;
        -:   38:  //Copy the game state to the post game state test case.
        1:   39:  memcpy(&expected, &actual, sizeof(struct gameState));
        1:   40:  assert(memcmp(&actual, &expected, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   41:  printf("Both PRE & POST GAME STATES ARE EQUIVALENT before calling the function.\n");
call    0 returned 100%
        -:   42:
        -:   43:  //Expected Results.
        1:   44:  expected.handCount[player] = actual.handCount[player] - 1;
        1:   45:  expected.playedCardCount = actual.playedCardCount + 1;
        -:   46:
        1:   47:  if( discardCard(handPos, player, &actual, nottrashed) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   48:	printf(" The discardCard() was called successfully for a played card with one card left in the hand.\n");
call    0 returned 100%
        1:   49:        assert( expected.handCount[player] == actual.handCount[player]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   50:        printf(" EXPECTED HAND COUNT: %i ACTUAL HAND COUNT: %i\n", expected.handCount[player], actual.handCount[player]);
call    0 returned 100%
        1:   51:        assert( expected.playedCardCount == actual.playedCardCount );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   52:        printf(" EXPECTED PLAYED CARD COUNT: %i ACTUAL PLAYED CARD COUNT: %i\n", expected.playedCardCount, actual.playedCardCount);
call    0 returned 100%
        1:   53:        assert( actual.hand[player][handPos] != baron );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   54:        printf(" The card was successfully discarded from the player's hand.\n"); 
call    0 returned 100%
        -:   55:  }else{
    #####:   56:	printf("The discardCard() failed to be called for a played card with one card left in the hand.i\n");
call    0 never executed
        -:   57:  }
        -:   58:
        -:   59:  struct gameState expected2, actual2;
        1:   60:  initializeGame(numPlayers, k, seed, &actual2);
call    0 returned 100%
        -:   61:
        -:   62:  //Set Up Case
        1:   63:  int handPos1 = 1;
        1:   64:  int trashed = 1;  
        -:   65: 
        1:   66:  actual2.handCount[player] = 2;
        1:   67:  actual2.hand[player][0] = smithy;
        1:   68:  actual2.hand[player][handPos1] = baron;
        1:   69:  actual2.playedCardCount = 0;
        -:   70: 
        -:   71: //Copy the game state to the post game state test case.
        1:   72:  memcpy(&expected2, &actual2, sizeof(struct gameState));
        1:   73:  assert(memcmp(&actual2, &expected2, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   74:  printf("Both PRE & POST GAME STATES ARE EQUIVALENT before calling the function.\n");
call    0 returned 100%
        -:   75:
        -:   76:  //Expected Results.
        1:   77:  expected2.handCount[player] = actual2.handCount[player] - 1;
        1:   78:  expected2.playedCardCount = actual2.playedCardCount;
        -:   79: 
        1:   80:  if( discardCard(handPos1, player, &actual2, trashed) == 0 ){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   81:	printf("The discardCard() was called successfully for a nonplayed card with multiple cards in hand.\n");
call    0 returned 100%
        1:   82:        assert( expected2.handCount[player] == actual2.handCount[player]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   83:        printf(" EXPECTED HAND COUNT: %i ACTUAL HAND COUNT: %i\n", expected2.handCount[player], actual2.handCount[player]);
call    0 returned 100%
        1:   84:        assert( expected2.playedCardCount == actual2.playedCardCount );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   85:        printf(" EXPECTED PLAYED CARD COUNT: %i ACTUAL PLAYED CARD COUNT: %i\n", expected2.playedCardCount, actual2.playedCardCount);
call    0 returned 100%
        1:   86:        assert( actual2.hand[player][handPos1] != baron );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        1:   87:        printf(" The card was successfully discarded from the player's hand.\n"); 
call    0 returned 100%
        -:   88:
        -:   89:  }else{
    #####:   90:	printf("The discardCard() failed to be calledi for a nonplayed card with multiple cards in hand.\n");
call    0 never executed
        -:   91:  }
        -:   92:
        -:   93:
        1:   94:  return 0;
        -:   95:
        -:   96:}
