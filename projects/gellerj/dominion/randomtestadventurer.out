------------------------
RUNNING RANDOM TEST CASE #1...
RANDOM CONFIG: PLAYERS: 3, SEED: 2634, HANDPOS: 195

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 335, new hand count is 337, expected 337...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 335, new hand count is 337, expected 337...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 335, new hand count is 337, expected 337...PASSED.
------------------------
RUNNING RANDOM TEST CASE #2...
RANDOM CONFIG: PLAYERS: 2, SEED: 4585, HANDPOS: 37

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 71, new hand count is 73, expected 73...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-0 copper, -2 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 71, new hand count is 73, expected 73...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 71, new hand count is 73, expected 73...PASSED.
------------------------
RUNNING RANDOM TEST CASE #3...
RANDOM CONFIG: PLAYERS: 4, SEED: 3248, HANDPOS: 164

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 340, new hand count is 342, expected 342...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 340, new hand count is 342, expected 342...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 340, new hand count is 342, expected 342...PASSED.
------------------------
RUNNING RANDOM TEST CASE #4...
RANDOM CONFIG: PLAYERS: 2, SEED: 302, HANDPOS: 210

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 217, new hand count is 219, expected 219...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 217, new hand count is 219, expected 219...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 217, new hand count is 219, expected 219...PASSED.
------------------------
RUNNING RANDOM TEST CASE #5...
RANDOM CONFIG: PLAYERS: 3, SEED: 3856, HANDPOS: 18

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 20, new hand count is 22, expected 22...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-0 copper, -2 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 20, new hand count is 22, expected 22...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 20, new hand count is 22, expected 22...PASSED.
------------------------
RUNNING RANDOM TEST CASE #6...
RANDOM CONFIG: PLAYERS: 4, SEED: 698, HANDPOS: 214

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 247, new hand count is 249, expected 249...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-0 copper, -2 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 247, new hand count is 249, expected 249...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 247, new hand count is 249, expected 249...PASSED.
------------------------
RUNNING RANDOM TEST CASE #7...
RANDOM CONFIG: PLAYERS: 4, SEED: 1472, HANDPOS: 221

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 310, new hand count is 312, expected 312...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 310, new hand count is 312, expected 312...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 310, new hand count is 312, expected 312...PASSED.
------------------------
RUNNING RANDOM TEST CASE #8...
RANDOM CONFIG: PLAYERS: 4, SEED: 1118, HANDPOS: 154

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 330, new hand count is 332, expected 332...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-2 copper, -0 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 330, new hand count is 332, expected 332...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 330, new hand count is 332, expected 332...PASSED.
------------------------
RUNNING RANDOM TEST CASE #9...
RANDOM CONFIG: PLAYERS: 2, SEED: 4638, HANDPOS: 121

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 297, new hand count is 299, expected 299...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 297, new hand count is 299, expected 299...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 297, new hand count is 299, expected 299...PASSED.
------------------------
RUNNING RANDOM TEST CASE #10...
RANDOM CONFIG: PLAYERS: 4, SEED: 2403, HANDPOS: 210

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 214, new hand count is 216, expected 216...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-0 copper, -2 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 214, new hand count is 216, expected 216...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 214, new hand count is 216, expected 216...PASSED.
------------------------
RUNNING RANDOM TEST CASE #11...
RANDOM CONFIG: PLAYERS: 2, SEED: 3583, HANDPOS: 59

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 127, new hand count is 129, expected 129...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-0 copper, -2 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 127, new hand count is 129, expected 129...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 127, new hand count is 129, expected 129...PASSED.
------------------------
RUNNING RANDOM TEST CASE #12...
RANDOM CONFIG: PLAYERS: 2, SEED: 817, HANDPOS: 118

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 120, new hand count is 122, expected 122...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 4, expected 2...-1 copper, -1 silver, -2 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 120, new hand count is 122, expected 122...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 120, new hand count is 122, expected 122...PASSED.
------------------------
RUNNING RANDOM TEST CASE #13...
RANDOM CONFIG: PLAYERS: 4, SEED: 316, HANDPOS: 180

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 403, new hand count is 405, expected 405...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 403, new hand count is 405, expected 405...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 403, new hand count is 405, expected 405...PASSED.
------------------------
RUNNING RANDOM TEST CASE #14...
RANDOM CONFIG: PLAYERS: 4, SEED: 2294, HANDPOS: 231

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 475, new hand count is 477, expected 477...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 5, expected 2...-1 copper, -1 silver, -3 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 475, new hand count is 477, expected 477...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 475, new hand count is 477, expected 477...PASSED.
------------------------
RUNNING RANDOM TEST CASE #15...
RANDOM CONFIG: PLAYERS: 2, SEED: 632, HANDPOS: 51

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 313, new hand count is 315, expected 315...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-2 copper, -0 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 313, new hand count is 315, expected 315...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 313, new hand count is 315, expected 315...PASSED.
------------------------
RUNNING RANDOM TEST CASE #16...
RANDOM CONFIG: PLAYERS: 4, SEED: 4860, HANDPOS: 22

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 27, new hand count is 29, expected 29...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 27, new hand count is 29, expected 29...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 27, new hand count is 29, expected 29...PASSED.
------------------------
RUNNING RANDOM TEST CASE #17...
RANDOM CONFIG: PLAYERS: 2, SEED: 528, HANDPOS: 25

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 79, new hand count is 81, expected 81...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 7, expected 2...-1 copper, -1 silver, -5 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 79, new hand count is 81, expected 81...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 79, new hand count is 81, expected 81...PASSED.
------------------------
RUNNING RANDOM TEST CASE #18...
RANDOM CONFIG: PLAYERS: 4, SEED: 2514, HANDPOS: 124

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 426, new hand count is 428, expected 428...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-1 copper, -1 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 426, new hand count is 428, expected 428...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 426, new hand count is 428, expected 428...PASSED.
------------------------
RUNNING RANDOM TEST CASE #19...
RANDOM CONFIG: PLAYERS: 2, SEED: 4605, HANDPOS: 264

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 373, new hand count is 375, expected 375...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 5, expected 2...-1 copper, -1 silver, -3 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 373, new hand count is 375, expected 375...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 373, new hand count is 375, expected 375...PASSED.
------------------------
RUNNING RANDOM TEST CASE #20...
RANDOM CONFIG: PLAYERS: 4, SEED: 774, HANDPOS: 35

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 239, new hand count is 241, expected 241...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-0 copper, -2 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 239, new hand count is 241, expected 241...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 239, new hand count is 241, expected 241...PASSED.
------------------------
RUNNING RANDOM TEST CASE #21...
RANDOM CONFIG: PLAYERS: 3, SEED: 4040, HANDPOS: 10

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 96, new hand count is 98, expected 98...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 96, new hand count is 98, expected 98...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 96, new hand count is 98, expected 98...PASSED.
------------------------
RUNNING RANDOM TEST CASE #22...
RANDOM CONFIG: PLAYERS: 2, SEED: 3271, HANDPOS: 219

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 237, new hand count is 239, expected 239...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-1 copper, -1 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 237, new hand count is 239, expected 239...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 237, new hand count is 239, expected 239...PASSED.
------------------------
RUNNING RANDOM TEST CASE #23...
RANDOM CONFIG: PLAYERS: 2, SEED: 4742, HANDPOS: 448

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 472, new hand count is 474, expected 474...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-1 copper, -1 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 472, new hand count is 474, expected 474...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 472, new hand count is 474, expected 474...PASSED.
------------------------
RUNNING RANDOM TEST CASE #24...
RANDOM CONFIG: PLAYERS: 2, SEED: 1296, HANDPOS: 144

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 166, new hand count is 168, expected 168...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-1 copper, -1 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 166, new hand count is 168, expected 168...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 166, new hand count is 168, expected 168...PASSED.
------------------------
RUNNING RANDOM TEST CASE #25...
RANDOM CONFIG: PLAYERS: 4, SEED: 114, HANDPOS: 10

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 161, new hand count is 163, expected 163...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-0 copper, -2 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 161, new hand count is 163, expected 163...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 161, new hand count is 163, expected 163...PASSED.
------------------------
RUNNING RANDOM TEST CASE #26...
RANDOM CONFIG: PLAYERS: 4, SEED: 4271, HANDPOS: 273

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 305, new hand count is 307, expected 307...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 4, expected 2...-0 copper, -2 silver, -2 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 305, new hand count is 307, expected 307...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 305, new hand count is 307, expected 307...PASSED.
------------------------
RUNNING RANDOM TEST CASE #27...
RANDOM CONFIG: PLAYERS: 3, SEED: 1644, HANDPOS: 110

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 296, new hand count is 298, expected 298...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 296, new hand count is 298, expected 298...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 296, new hand count is 298, expected 298...PASSED.
------------------------
RUNNING RANDOM TEST CASE #28...
RANDOM CONFIG: PLAYERS: 3, SEED: 2179, HANDPOS: 286

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 401, new hand count is 403, expected 403...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-2 copper, -0 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 401, new hand count is 403, expected 403...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 401, new hand count is 403, expected 403...PASSED.
------------------------
RUNNING RANDOM TEST CASE #29...
RANDOM CONFIG: PLAYERS: 3, SEED: 3017, HANDPOS: 134

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 212, new hand count is 214, expected 214...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-2 copper, -0 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 212, new hand count is 214, expected 214...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 212, new hand count is 214, expected 214...PASSED.
------------------------
RUNNING RANDOM TEST CASE #30...
RANDOM CONFIG: PLAYERS: 2, SEED: 3622, HANDPOS: 33

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 231, new hand count is 233, expected 233...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 231, new hand count is 233, expected 233...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 231, new hand count is 233, expected 233...PASSED.
------------------------
RUNNING RANDOM TEST CASE #31...
RANDOM CONFIG: PLAYERS: 2, SEED: 1132, HANDPOS: 81

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 84, new hand count is 86, expected 86...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 5, expected 2...-1 copper, -1 silver, -3 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 84, new hand count is 86, expected 86...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 84, new hand count is 86, expected 86...PASSED.
------------------------
RUNNING RANDOM TEST CASE #32...
RANDOM CONFIG: PLAYERS: 4, SEED: 4675, HANDPOS: 222

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 379, new hand count is 381, expected 381...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 379, new hand count is 381, expected 381...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 379, new hand count is 381, expected 381...PASSED.
------------------------
RUNNING RANDOM TEST CASE #33...
RANDOM CONFIG: PLAYERS: 2, SEED: 3186, HANDPOS: 71

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 116, new hand count is 118, expected 118...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-2 copper, -0 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 116, new hand count is 118, expected 118...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 116, new hand count is 118, expected 118...PASSED.
------------------------
RUNNING RANDOM TEST CASE #34...
RANDOM CONFIG: PLAYERS: 4, SEED: 4560, HANDPOS: 295

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 349, new hand count is 351, expected 351...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 349, new hand count is 351, expected 351...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 349, new hand count is 351, expected 351...PASSED.
------------------------
RUNNING RANDOM TEST CASE #35...
RANDOM CONFIG: PLAYERS: 2, SEED: 670, HANDPOS: 54

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 101, new hand count is 103, expected 103...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-0 copper, -2 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 101, new hand count is 103, expected 103...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 101, new hand count is 103, expected 103...PASSED.
------------------------
RUNNING RANDOM TEST CASE #36...
RANDOM CONFIG: PLAYERS: 2, SEED: 4466, HANDPOS: 243

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 288, new hand count is 290, expected 290...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 288, new hand count is 290, expected 290...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 288, new hand count is 290, expected 290...PASSED.
------------------------
RUNNING RANDOM TEST CASE #37...
RANDOM CONFIG: PLAYERS: 3, SEED: 3602, HANDPOS: 40

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 292, new hand count is 294, expected 294...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 292, new hand count is 294, expected 294...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 292, new hand count is 294, expected 294...PASSED.
------------------------
RUNNING RANDOM TEST CASE #38...
RANDOM CONFIG: PLAYERS: 3, SEED: 797, HANDPOS: 176

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 287, new hand count is 289, expected 289...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 287, new hand count is 289, expected 289...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 287, new hand count is 289, expected 289...PASSED.
------------------------
RUNNING RANDOM TEST CASE #39...
RANDOM CONFIG: PLAYERS: 2, SEED: 2243, HANDPOS: 447

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 459, new hand count is 461, expected 461...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-0 copper, -2 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 459, new hand count is 461, expected 461...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 459, new hand count is 461, expected 461...PASSED.
------------------------
RUNNING RANDOM TEST CASE #40...
RANDOM CONFIG: PLAYERS: 3, SEED: 442, HANDPOS: 123

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 244, new hand count is 246, expected 246...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 4, expected 2...-0 copper, -2 silver, -2 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 244, new hand count is 246, expected 246...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 244, new hand count is 246, expected 246...PASSED.
------------------------
RUNNING RANDOM TEST CASE #41...
RANDOM CONFIG: PLAYERS: 4, SEED: 2194, HANDPOS: 112

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 160, new hand count is 162, expected 162...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 160, new hand count is 162, expected 162...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 160, new hand count is 162, expected 162...PASSED.
------------------------
RUNNING RANDOM TEST CASE #42...
RANDOM CONFIG: PLAYERS: 2, SEED: 2169, HANDPOS: 39

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 43, new hand count is 45, expected 45...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-1 copper, -1 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 43, new hand count is 45, expected 45...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 43, new hand count is 45, expected 45...PASSED.
------------------------
RUNNING RANDOM TEST CASE #43...
RANDOM CONFIG: PLAYERS: 4, SEED: 1437, HANDPOS: 71

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 173, new hand count is 175, expected 175...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-0 copper, -2 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check player 4 hand is untouched...PASSED.
Check player 4, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 173, new hand count is 175, expected 175...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 173, new hand count is 175, expected 175...PASSED.
------------------------
RUNNING RANDOM TEST CASE #44...
RANDOM CONFIG: PLAYERS: 2, SEED: 3030, HANDPOS: 190

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 238, new hand count is 240, expected 240...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 0, expected 2...-0 copper, -0 silver, -0 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 238, new hand count is 240, expected 240...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 238, new hand count is 240, expected 240...PASSED.
------------------------
RUNNING RANDOM TEST CASE #45...
RANDOM CONFIG: PLAYERS: 2, SEED: 3042, HANDPOS: 124

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 267, new hand count is 269, expected 269...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-0 copper, -2 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 267, new hand count is 269, expected 269...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 267, new hand count is 269, expected 269...PASSED.
------------------------
RUNNING RANDOM TEST CASE #46...
RANDOM CONFIG: PLAYERS: 2, SEED: 3445, HANDPOS: 27

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 93, new hand count is 95, expected 95...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-1 copper, -1 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 93, new hand count is 95, expected 95...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 93, new hand count is 95, expected 95...PASSED.
------------------------
RUNNING RANDOM TEST CASE #47...
RANDOM CONFIG: PLAYERS: 3, SEED: 4160, HANDPOS: 178

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 268, new hand count is 270, expected 270...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 268, new hand count is 270, expected 270...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 268, new hand count is 270, expected 270...PASSED.
------------------------
RUNNING RANDOM TEST CASE #48...
RANDOM CONFIG: PLAYERS: 3, SEED: 2292, HANDPOS: 274

Check new card #1 is a treasure card...
Card #1 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 330, new hand count is 332, expected 332...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 3, expected 2...-1 copper, -1 silver, -1 gold...FAILED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 330, new hand count is 332, expected 332...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 330, new hand count is 332, expected 332...PASSED.
------------------------
RUNNING RANDOM TEST CASE #49...
RANDOM CONFIG: PLAYERS: 3, SEED: 2853, HANDPOS: 11

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 5, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 110, new hand count is 112, expected 112...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-1 copper, -1 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 110, new hand count is 112, expected 112...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 110, new hand count is 112, expected 112...PASSED.
------------------------
RUNNING RANDOM TEST CASE #50...
RANDOM CONFIG: PLAYERS: 3, SEED: 2568, HANDPOS: 128

Check new card #1 is a treasure card...
Card #1 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check new card #2 is a treasure card...
Card #2 is 4, expected 4 (copper), 5 (silver), or 6 (gold)...PASSED.
Check that hand count is incremented by 2 (+2 new treasure cards)...
Initial hand count was 443, new hand count is 445, expected 445...PASSED.
Check new treasure cards came from player 1's deck...
Net difference in deck treasure card supply is 2, expected 2...-2 copper, -0 silver, -0 gold...PASSED.
Check player 2 hand is untouched...PASSED.
Check player 2, deck is untouched...PASSED.
Check player 3 hand is untouched...PASSED.
Check player 3, deck is untouched...PASSED.
Check victory pile is untouched...PASSED.
Check that copper treasure cards are gained by adventurer...
Initial hand count was 443, new hand count is 445, expected 445...PASSED.
Check that silver treasure cards are gained by adventurer...
Initial hand count was 443, new hand count is 445, expected 445...PASSED.


TESTS: 50	PASSED: 26	FAILED: 24

File 'dominion.c'
Lines executed:24.39% of 660
Branches executed:25.30% of 415
Taken at least once:18.31% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2941 returned 100% blocks executed 100%
        -:    8:int compare(const void *a, const void *b) {
     2941:    9:    if (*(int *) a > *(int *) b)
branch  0 taken 9%
branch  1 taken 91%
      267:   10:        return 1;
     2674:   11:    if (*(int *) a < *(int *) b)
branch  0 taken 44%
branch  1 taken 56%
     1183:   12:        return -1;
     1491:   13:    return 0;
     2941:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState *newGame() {
    #####:   17:    struct gameState *g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int *k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 50 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
       50:   44:    SelectStream(1);
       50:   45:    PutSeed((long) randomSeed);
        -:   46:
        -:   47:    //check number of players
      100:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
    #####:   49:        return -1;
        -:   50:    }
        -:   51:
        -:   52:    //set number of players
       50:   53:    state->numPlayers = numPlayers;
        -:   54:
        -:   55:    //check selected kingdom cards are different
     1100:   56:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9%
    11000:   57:        for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9%
     9500:   58:            if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
    #####:   59:                return -1;
        -:   60:            }
     5000:   61:        }
      500:   62:    }
        -:   63:
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
       50:   69:    if (numPlayers == 2) {
branch  0 taken 42%
branch  1 taken 58%
       21:   70:        state->supplyCount[curse] = 10;
       21:   71:    }
       29:   72:    else if (numPlayers == 3) {
branch  0 taken 45%
branch  1 taken 55%
       13:   73:        state->supplyCount[curse] = 20;
       13:   74:    }
        -:   75:    else {
       16:   76:        state->supplyCount[curse] = 30;
        -:   77:    }
        -:   78:
        -:   79:    //set number of Victory cards
       50:   80:    if (numPlayers == 2) {
branch  0 taken 42%
branch  1 taken 58%
       21:   81:        state->supplyCount[estate] = 8;
       21:   82:        state->supplyCount[duchy] = 8;
       21:   83:        state->supplyCount[province] = 8;
       21:   84:    }
        -:   85:    else {
       29:   86:        state->supplyCount[estate] = 12;
       29:   87:        state->supplyCount[duchy] = 12;
       29:   88:        state->supplyCount[province] = 12;
        -:   89:    }
        -:   90:
        -:   91:    //set number of Treasure cards
       50:   92:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       50:   93:    state->supplyCount[silver] = 40;
       50:   94:    state->supplyCount[gold] = 30;
        -:   95:
        -:   96:    //set number of Kingdom cards
     2100:   97:    for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:   98:    {
    16500:   99:        for (j = 0; j < 10; j++)                //loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  100:        {
     7750:  101:            if (kingdomCards[j] == i) {
branch  0 taken 6%
branch  1 taken 94%
        -:  102:                //check if card is a 'Victory' Kingdom card
     1000:  103:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
       50:  104:                    if (numPlayers == 2) {
branch  0 taken 42%
branch  1 taken 58%
       21:  105:                        state->supplyCount[i] = 8;
       21:  106:                    }
       29:  107:                    else { state->supplyCount[i] = 12; }
       50:  108:                }
        -:  109:                else {
      450:  110:                    state->supplyCount[i] = 10;
        -:  111:                }
      500:  112:                break;
        -:  113:            }
        -:  114:            else    //card is not in the set choosen for the game
        -:  115:            {
     7250:  116:                state->supplyCount[i] = -1;
        -:  117:            }
     7250:  118:        }
        -:  119:
     1000:  120:    }
        -:  121:
        -:  122:    ////////////////////////
        -:  123:    //supply intilization complete
        -:  124:
        -:  125:    //set player decks
      390:  126:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 74%
branch  1 taken 26%
      145:  127:        state->deckCount[i] = 0;
     1160:  128:        for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25%
      435:  129:            state->deck[i][j] = estate;
      435:  130:            state->deckCount[i]++;
      435:  131:        }
     2320:  132:        for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13%
     1015:  133:            state->deck[i][j] = copper;
     1015:  134:            state->deckCount[i]++;
     1015:  135:        }
      145:  136:    }
        -:  137:
        -:  138:    //shuffle player decks
      390:  139:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 74%
branch  1 taken 26%
      145:  140:        if (shuffle(i, state) < 0) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  141:            return -1;
        -:  142:        }
      145:  143:    }
        -:  144:
        -:  145:    //draw player hands
      390:  146:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 74%
branch  1 taken 26%
        -:  147:        //initialize hand size to zero
      145:  148:        state->handCount[i] = 0;
      145:  149:        state->discardCount[i] = 0;
        -:  150:        //draw 5 cards
        -:  151:        // for (j = 0; j < 5; j++)
        -:  152:        //	{
        -:  153:        //	  drawCard(i, state);
        -:  154:        //	}
      145:  155:    }
        -:  156:
        -:  157:    //set embargo tokens to 0 for all supply piles
     2800:  158:    for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4%
     1350:  159:        state->embargoTokens[i] = 0;
     1350:  160:    }
        -:  161:
        -:  162:    //initialize first player's turn
       50:  163:    state->outpostPlayed = 0;
       50:  164:    state->phase = 0;
       50:  165:    state->numActions = 1;
       50:  166:    state->numBuys = 1;
       50:  167:    state->playedCardCount = 0;
       50:  168:    state->whoseTurn = 0;
       50:  169:    state->handCount[state->whoseTurn] = 0;
        -:  170:    //int it; move to top
        -:  171:
        -:  172:    //Moved draw cards to here, only drawing at the start of a turn
      600:  173:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17%
      250:  174:        drawCard(state->whoseTurn, state);
      250:  175:    }
        -:  176:
       50:  177:    updateCoins(state->whoseTurn, state, 0);
        -:  178:
       50:  179:    return 0;
       50:  180:}
        -:  181:
function shuffle called 147 returned 100% blocks executed 100%
        -:  182:int shuffle(int player, struct gameState *state) {
        -:  183:
        -:  184:
        -:  185:    int newDeck[MAX_DECK];
      147:  186:    int newDeckPos = 0;
        -:  187:    int card;
        -:  188:    int i;
        -:  189:
      147:  190:    if (state->deckCount[player] < 1)
branch  0 taken 1%
branch  1 taken 99%
        1:  191:        return -1;
      146:  192:    qsort((void *) (state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  193:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  194:
     3556:  195:    while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8%
     1632:  196:        card = floor(Random() * state->deckCount[player]);
     1632:  197:        newDeck[newDeckPos] = state->deck[player][card];
     1632:  198:        newDeckPos++;
    26856:  199:        for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 88%
branch  1 taken 12%
    11796:  200:            state->deck[player][i] = state->deck[player][i + 1];
    11796:  201:        }
     1632:  202:        state->deckCount[player]--;
        -:  203:    }
     3556:  204:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8%
     1632:  205:        state->deck[player][i] = newDeck[i];
     1632:  206:        state->deckCount[player]++;
     1632:  207:    }
        -:  208:
      146:  209:    return 0;
      147:  210:}
        -:  211:
function playCard called 0 returned 0% blocks executed 0%
        -:  212:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  213:    int card;
    #####:  214:    int coin_bonus = 0;        //tracks coins gain from actions
        -:  215:
        -:  216:    //check if it is the right phase
    #####:  217:    if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  218:        return -1;
        -:  219:    }
        -:  220:
        -:  221:    //check if player has enough actions
    #####:  222:    if (state->numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  223:        return -1;
        -:  224:    }
        -:  225:
        -:  226:    //get card played
    #####:  227:    card = handCard(handPos, state);
        -:  228:
        -:  229:    //check if selected card is an action
    #####:  230:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  231:        return -1;
        -:  232:    }
        -:  233:
        -:  234:    //play card
    #####:  235:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0) {
branch  0 never executed
branch  1 never executed
    #####:  236:        return -1;
        -:  237:    }
        -:  238:
        -:  239:    //reduce number of actions
    #####:  240:    state->numActions--;
        -:  241:
        -:  242:    //update coins (Treasure cards may be added with card draws)
    #####:  243:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  244:
    #####:  245:    return 0;
    #####:  246:}
        -:  247:
function buyCard called 0 returned 0% blocks executed 0%
        -:  248:int buyCard(int supplyPos, struct gameState *state) {
        -:  249:    int who;
        -:  250:    if (DEBUG) {
        -:  251:        printf("Entering buyCard...\n");
        -:  252:    }
        -:  253:
        -:  254:    // I don't know what to do about the phase thing.
        -:  255:
    #####:  256:    who = state->whoseTurn;
        -:  257:
    #####:  258:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  259:        if (DEBUG)
        -:  260:            printf("You do not have any buys left\n");
    #####:  261:        return -1;
    #####:  262:    } else if (supplyCount(supplyPos, state) < 1) {
branch  0 never executed
branch  1 never executed
        -:  263:        if (DEBUG)
        -:  264:            printf("There are not any of that type of card left\n");
    #####:  265:        return -1;
    #####:  266:    } else if (state->coins < getCost(supplyPos)) {
branch  0 never executed
branch  1 never executed
        -:  267:        if (DEBUG)
        -:  268:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  269:        return -1;
        -:  270:    } else {
    #####:  271:        state->phase = 1;
        -:  272:        //state->supplyCount[supplyPos]--;
    #####:  273:        gainCard(supplyPos, state, 0,
    #####:  274:                 who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  275:
    #####:  276:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  277:        state->numBuys--;
        -:  278:        if (DEBUG)
        -:  279:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos,
        -:  280:                   getCost(supplyPos), state->numBuys, state->coins);
        -:  281:    }
        -:  282:
        -:  283:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  284:    //state->discardCount[who]++;
        -:  285:
    #####:  286:    return 0;
    #####:  287:}
        -:  288:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  289:int numHandCards(struct gameState *state) {
    #####:  290:    return state->handCount[whoseTurn(state)];
        -:  291:}
        -:  292:
function handCard called 0 returned 0% blocks executed 0%
        -:  293:int handCard(int handPos, struct gameState *state) {
    #####:  294:    int currentPlayer = whoseTurn(state);
    #####:  295:    return state->hand[currentPlayer][handPos];
        -:  296:}
        -:  297:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  298:int supplyCount(int card, struct gameState *state) {
    #####:  299:    return state->supplyCount[card];
        -:  300:}
        -:  301:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  302:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  303:    int i;
    #####:  304:    int count = 0;
        -:  305:
    #####:  306:    for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  307:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  308:    }
        -:  309:
    #####:  310:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  311:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  312:    }
        -:  313:
    #####:  314:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  315:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  316:    }
        -:  317:
    #####:  318:    return count;
        -:  319:}
        -:  320:
function whoseTurn called 150 returned 100% blocks executed 100%
        -:  321:int whoseTurn(struct gameState *state) {
      150:  322:    return state->whoseTurn;
        -:  323:}
        -:  324:
function endTurn called 0 returned 0% blocks executed 0%
        -:  325:int endTurn(struct gameState *state) {
        -:  326:    int k;
        -:  327:    int i;
    #####:  328:    int currentPlayer = whoseTurn(state);
        -:  329:
        -:  330:    //Discard hand
    #####:  331:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  332:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  333:        state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  334:    }
    #####:  335:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  336:
        -:  337:    //Code for determining the player
    #####:  338:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  339:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  340:    }
        -:  341:    else {
    #####:  342:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  343:    }
        -:  344:
    #####:  345:    state->outpostPlayed = 0;
    #####:  346:    state->phase = 0;
    #####:  347:    state->numActions = 1;
    #####:  348:    state->coins = 0;
    #####:  349:    state->numBuys = 1;
    #####:  350:    state->playedCardCount = 0;
    #####:  351:    state->handCount[state->whoseTurn] = 0;
        -:  352:
        -:  353:    //int k; move to top
        -:  354:    //Next player draws hand
    #####:  355:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  356:        drawCard(state->whoseTurn, state);//Draw a card
    #####:  357:    }
        -:  358:
        -:  359:    //Update money
    #####:  360:    updateCoins(state->whoseTurn, state, 0);
        -:  361:
    #####:  362:    return 0;
        -:  363:}
        -:  364:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  365:int isGameOver(struct gameState *state) {
        -:  366:    int i;
        -:  367:    int j;
        -:  368:
        -:  369:    //if stack of Province cards is empty, the game ends
    #####:  370:    if (state->supplyCount[province] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  371:        return 1;
        -:  372:    }
        -:  373:
        -:  374:    //if three supply pile are at 0, the game ends
    #####:  375:    j = 0;
    #####:  376:    for (i = 0; i < 25; i++) {
branch  0 never executed
branch  1 never executed
    #####:  377:        if (state->supplyCount[i] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  378:            j++;
    #####:  379:        }
    #####:  380:    }
    #####:  381:    if (j >= 3) {
branch  0 never executed
branch  1 never executed
    #####:  382:        return 1;
        -:  383:    }
        -:  384:
    #####:  385:    return 0;
    #####:  386:}
        -:  387:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  388:int scoreFor(int player, struct gameState *state) {
        -:  389:
        -:  390:    int i;
    #####:  391:    int score = 0;
        -:  392:    //score from hand
    #####:  393:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  394:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  395:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  396:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  397:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  398:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  399:        if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
    #####:  400:    }
        -:  401:
        -:  402:    //score from discard
    #####:  403:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  404:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  405:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  406:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  407:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  408:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  409:        if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
    #####:  410:    }
        -:  411:
        -:  412:    //score from deck
    #####:  413:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  414:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  415:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  416:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  417:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  418:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  419:        if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 never executed
branch  1 never executed
    #####:  420:    }
        -:  421:
    #####:  422:    return score;
        -:  423:}
        -:  424:
function getWinners called 0 returned 0% blocks executed 0%
        -:  425:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  426:    int i;
        -:  427:    int j;
        -:  428:    int highScore;
        -:  429:    int currentPlayer;
        -:  430:
        -:  431:    //get score for each player
    #####:  432:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  433:        //set unused player scores to -9999
    #####:  434:        if (i >= state->numPlayers) {
branch  0 never executed
branch  1 never executed
    #####:  435:            players[i] = -9999;
    #####:  436:        }
        -:  437:        else {
    #####:  438:            players[i] = scoreFor(i, state);
        -:  439:        }
    #####:  440:    }
        -:  441:
        -:  442:    //find highest score
    #####:  443:    j = 0;
    #####:  444:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  445:        if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  446:            j = i;
    #####:  447:        }
    #####:  448:    }
    #####:  449:    highScore = players[j];
        -:  450:
        -:  451:    //add 1 to players who had less turns
    #####:  452:    currentPlayer = whoseTurn(state);
    #####:  453:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  454:        if (players[i] == highScore && i > currentPlayer) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  455:            players[i]++;
    #####:  456:        }
    #####:  457:    }
        -:  458:
        -:  459:    //find new highest score
    #####:  460:    j = 0;
    #####:  461:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  462:        if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  463:            j = i;
    #####:  464:        }
    #####:  465:    }
    #####:  466:    highScore = players[j];
        -:  467:
        -:  468:    //set winners in array to 1 and rest to 0
    #####:  469:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  470:        if (players[i] == highScore) {
branch  0 never executed
branch  1 never executed
    #####:  471:            players[i] = 1;
    #####:  472:        }
        -:  473:        else {
    #####:  474:            players[i] = 0;
        -:  475:        }
    #####:  476:    }
        -:  477:
    #####:  478:    return 0;
        -:  479:}
        -:  480:
function drawCard called 1594 returned 100% blocks executed 91%
        -:  481:int drawCard(int player, struct gameState *state) {
        -:  482:    int count;
        -:  483:    int deckCounter;
     1594:  484:    if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  485:
        -:  486:        //Step 1 Shuffle the discard pile back into a deck
        -:  487:        int i;
        -:  488:        //Move discard to deck
      366:  489:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1%
      182:  490:            state->deck[player][i] = state->discard[player][i];
      182:  491:            state->discard[player][i] = -1;
      182:  492:        }
        -:  493:
        1:  494:        state->deckCount[player] = state->discardCount[player];
        1:  495:        state->discardCount[player] = 0;//Reset discard
        -:  496:
        -:  497:        //Shufffle the deck
        1:  498:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  499:
        -:  500:        if (DEBUG) {//Debug statements
        -:  501:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  502:        }
        -:  503:
        1:  504:        state->discardCount[player] = 0;
        -:  505:
        -:  506:        //Step 2 Draw Card
        1:  507:        count = state->handCount[player];//Get current player's hand count
        -:  508:
        -:  509:        if (DEBUG) {//Debug statements
        -:  510:            printf("Current hand count: %d\n", count);
        -:  511:        }
        -:  512:
        1:  513:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  514:
        1:  515:        if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  516:            return -1;
        -:  517:
        1:  518:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  519:        state->deckCount[player]--;
        1:  520:        state->handCount[player]++;//Increment hand count
        1:  521:    }
        -:  522:
        -:  523:    else {
     1593:  524:        int count = state->handCount[player];//Get current hand count for player
        -:  525:        int deckCounter;
        -:  526:        if (DEBUG) {//Debug statements
        -:  527:            printf("Current hand count: %d\n", count);
        -:  528:        }
        -:  529:
        -:  530:        // Take the last card from the deck and place it in the last position of the hand.
        -:  531:
     1593:  532:        deckCounter = state->deckCount[player];//Create holder for the deck count
     1593:  533:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1593:  534:        state->deckCount[player]--;
     1593:  535:        state->handCount[player]++;//Increment hand count
        -:  536:    }
        -:  537:
     1594:  538:    return 0;
     1594:  539:}
        -:  540:
function getCost called 0 returned 0% blocks executed 0%
        -:  541:int getCost(int cardNumber) {
    #####:  542:    switch (cardNumber) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  543:        case curse:
    #####:  544:            return 0;
        -:  545:        case estate:
    #####:  546:            return 2;
        -:  547:        case duchy:
    #####:  548:            return 5;
        -:  549:        case province:
    #####:  550:            return 8;
        -:  551:        case copper:
    #####:  552:            return 0;
        -:  553:        case silver:
    #####:  554:            return 3;
        -:  555:        case gold:
    #####:  556:            return 6;
        -:  557:        case adventurer:
    #####:  558:            return 6;
        -:  559:        case council_room:
    #####:  560:            return 5;
        -:  561:        case feast:
    #####:  562:            return 4;
        -:  563:        case gardens:
    #####:  564:            return 4;
        -:  565:        case mine:
    #####:  566:            return 5;
        -:  567:        case remodel:
    #####:  568:            return 4;
        -:  569:        case smithy:
    #####:  570:            return 4;
        -:  571:        case village:
    #####:  572:            return 3;
        -:  573:        case baron:
    #####:  574:            return 4;
        -:  575:        case great_hall:
    #####:  576:            return 3;
        -:  577:        case minion:
    #####:  578:            return 5;
        -:  579:        case steward:
    #####:  580:            return 3;
        -:  581:        case tribute:
    #####:  582:            return 5;
        -:  583:        case ambassador:
    #####:  584:            return 3;
        -:  585:        case cutpurse:
    #####:  586:            return 4;
        -:  587:        case embargo:
    #####:  588:            return 2;
        -:  589:        case outpost:
    #####:  590:            return 5;
        -:  591:        case salvager:
    #####:  592:            return 4;
        -:  593:        case sea_hag:
    #####:  594:            return 4;
        -:  595:        case treasure_map:
    #####:  596:            return 4;
        -:  597:    }
        -:  598:
    #####:  599:    return -1;
    #####:  600:}
        -:  601:
function cardEffect called 150 returned 100% blocks executed 2%
        -:  602:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  603:    int i;
        -:  604:    int j;
        -:  605:    int k;
        -:  606:    int x;
        -:  607:    int index;
      150:  608:    int currentPlayer = whoseTurn(state);
      150:  609:    int nextPlayer = currentPlayer + 1;
        -:  610:
      150:  611:    int tributeRevealedCards[2] = {-1, -1};
        -:  612:    int temphand[MAX_HAND];// moved above the if statement
      150:  613:    int drawntreasure = 0;
        -:  614:    int cardDrawn;
      150:  615:    int z = 0;// this is the counter for the temp hand
      150:  616:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  617:        nextPlayer = 0;
    #####:  618:    }
        -:  619:
        -:  620:
        -:  621:    //uses switch to select card and perform actions
      150:  622:    switch (card) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  623:        case adventurer:
      150:  624:            playAdventurer(state);
      150:  625:            return 0;
        -:  626:
        -:  627:        case council_room:
    #####:  628:            playCouncil_Room(state, handPos);
    #####:  629:            return 0;
        -:  630:
        -:  631:        case feast:
        -:  632:            //gain card with cost up to 5
        -:  633:            //Backup hand
    #####:  634:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  635:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  636:                state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  637:            }
        -:  638:            //Backup hand
        -:  639:
        -:  640:            //Update Coins for Buy
    #####:  641:            updateCoins(currentPlayer, state, 5);
    #####:  642:            x = 1;//Condition to loop on
    #####:  643:            while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  644:                if (supplyCount(choice1, state) <= 0) {
branch  0 never executed
branch  1 never executed
        -:  645:                    if (DEBUG)
        -:  646:                        printf("None of that card left, sorry!\n");
        -:  647:
        -:  648:                    if (DEBUG) {
        -:  649:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  650:                    }
    #####:  651:                }
    #####:  652:                else if (state->coins < getCost(choice1)) {
branch  0 never executed
branch  1 never executed
    #####:  653:                    printf("That card is too expensive!\n");
        -:  654:
        -:  655:                    if (DEBUG) {
        -:  656:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  657:                    }
    #####:  658:                }
        -:  659:                else {
        -:  660:
        -:  661:                    if (DEBUG) {
        -:  662:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  663:                                                   state->discardCount[currentPlayer]);
        -:  664:                    }
        -:  665:
    #####:  666:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  667:                    x = 0;//No more buying cards
        -:  668:
        -:  669:                    if (DEBUG) {
        -:  670:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  671:                                                   state->discardCount[currentPlayer]);
        -:  672:                    }
        -:  673:
        -:  674:                }
        -:  675:            }
        -:  676:
        -:  677:            //Reset Hand
    #####:  678:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  679:                state->hand[currentPlayer][i] = temphand[i];
    #####:  680:                temphand[i] = -1;
    #####:  681:            }
        -:  682:            //Reset Hand
        -:  683:
    #####:  684:            return 0;
        -:  685:
        -:  686:        case gardens:
    #####:  687:            return -1;
        -:  688:
        -:  689:        case mine:
    #####:  690:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  691:
    #####:  692:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  693:                return -1;
        -:  694:            }
        -:  695:
    #####:  696:            if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  697:                return -1;
        -:  698:            }
        -:  699:
    #####:  700:            if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
branch  0 never executed
branch  1 never executed
    #####:  701:                return -1;
        -:  702:            }
        -:  703:
    #####:  704:            gainCard(choice2, state, 2, currentPlayer);
        -:  705:
        -:  706:            //discard card from hand
    #####:  707:            discardCard(handPos, currentPlayer, state, 0);
        -:  708:
        -:  709:            //discard trashed card
    #####:  710:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  711:                if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  712:                    discardCard(i, currentPlayer, state, 0);
    #####:  713:                    break;
        -:  714:                }
    #####:  715:            }
        -:  716:
    #####:  717:            return 0;
        -:  718:
        -:  719:        case remodel:
    #####:  720:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:            if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) {
branch  0 never executed
branch  1 never executed
    #####:  723:                return -1;
        -:  724:            }
        -:  725:
    #####:  726:            gainCard(choice2, state, 0, currentPlayer);
        -:  727:
        -:  728:            //discard card from hand
    #####:  729:            discardCard(handPos, currentPlayer, state, 0);
        -:  730:
        -:  731:            //discard trashed card
    #####:  732:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  733:                if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  734:                    discardCard(i, currentPlayer, state, 0);
    #####:  735:                    break;
        -:  736:                }
    #####:  737:            }
        -:  738:
        -:  739:
    #####:  740:            return 0;
        -:  741:
        -:  742:        case smithy:
        -:  743:            //+3 Cards
    #####:  744:            playSmithy(state, handPos);
    #####:  745:            return 0;
        -:  746:
        -:  747:        case village:
    #####:  748:            playVillage(state, handPos);
    #####:  749:            return 0;
        -:  750:
        -:  751:        case baron:
    #####:  752:            state->numBuys++;//Increase buys by 1!
    #####:  753:            if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:                int p = 0;//Iterator for hand!
    #####:  755:                int card_not_discarded = 1;//Flag for discard set!
    #####:  756:                while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  757:                    if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:                        state->discardCount[currentPlayer]++;
    #####:  761:                        for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  762:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####:  763:                        }
    #####:  764:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:                        state->handCount[currentPlayer]--;
    #####:  766:                        card_not_discarded = 0;//Exit the loop
    #####:  767:                    }
    #####:  768:                    else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  769:                        if (DEBUG) {
        -:  770:                            printf("No estate cards in your hand, invalid choice\n");
        -:  771:                            printf("Must gain an estate if there are any\n");
        -:  772:                        }
    #####:  773:                        if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  774:                            gainCard(estate, state, 0, currentPlayer);
    #####:  775:                            state->supplyCount[estate]--;//Decrement estates
    #####:  776:                            if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  777:                                isGameOver(state);
    #####:  778:                            }
    #####:  779:                        }
    #####:  780:                        card_not_discarded = 0;//Exit the loop
    #####:  781:                    }
        -:  782:
        -:  783:                    else {
    #####:  784:                        p++;//Next card
        -:  785:                    }
        -:  786:                }
    #####:  787:            }
        -:  788:
        -:  789:            else {
    #####:  790:                if (supplyCount(estate, state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  791:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  792:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  793:                    if (supplyCount(estate, state) == 0) {
branch  0 never executed
branch  1 never executed
    #####:  794:                        isGameOver(state);
    #####:  795:                    }
    #####:  796:                }
        -:  797:            }
        -:  798:
        -:  799:
    #####:  800:            return 0;
        -:  801:
        -:  802:        case great_hall:
        -:  803:            //+1 Card
    #####:  804:            drawCard(currentPlayer, state);
        -:  805:
        -:  806:            //+1 Actions
    #####:  807:            state->numActions++;
        -:  808:
        -:  809:            //discard card from hand
    #####:  810:            discardCard(handPos, currentPlayer, state, 0);
    #####:  811:            return 0;
        -:  812:
        -:  813:        case minion:
        -:  814:            //+1 action
    #####:  815:            state->numActions++;
        -:  816:
        -:  817:            //discard card from hand
    #####:  818:            discardCard(handPos, currentPlayer, state, 0);
        -:  819:
    #####:  820:            if (choice1)        //+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:            {
    #####:  822:                state->coins = state->coins + 2;
    #####:  823:            }
        -:  824:
    #####:  825:            else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:            {
        -:  827:                //discard hand
    #####:  828:                while (numHandCards(state) > 0) {
branch  0 never executed
branch  1 never executed
    #####:  829:                    discardCard(handPos, currentPlayer, state, 0);
        -:  830:                }
        -:  831:
        -:  832:                //draw 4
    #####:  833:                for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  834:                    drawCard(currentPlayer, state);
    #####:  835:                }
        -:  836:
        -:  837:                //other players discard hand and redraw if hand size > 4
    #####:  838:                for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  839:                    if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  840:                        if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -:  841:                            //discard hand
    #####:  842:                            while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  843:                                discardCard(handPos, i, state, 0);
        -:  844:                            }
        -:  845:
        -:  846:                            //draw 4
    #####:  847:                            for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####:  848:                                drawCard(i, state);
    #####:  849:                            }
    #####:  850:                        }
    #####:  851:                    }
    #####:  852:                }
        -:  853:
    #####:  854:            }
    #####:  855:            return 0;
        -:  856:
        -:  857:        case steward:
    #####:  858:            playSteward(state, choice1, choice2, choice3, handPos);
    #####:  859:            return 0;
        -:  860:
        -:  861:        case tribute:
    #####:  862:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  863:                if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  864:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  865:                    state->deckCount[nextPlayer]--;
    #####:  866:                }
    #####:  867:                else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  868:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  869:                    state->discardCount[nextPlayer]--;
    #####:  870:                }
        -:  871:                else {
        -:  872:                    //No Card to Reveal
        -:  873:                    if (DEBUG) {
        -:  874:                        printf("No cards to reveal\n");
        -:  875:                    }
        -:  876:                }
    #####:  877:            }
        -:  878:
        -:  879:            else {
    #####:  880:                if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  881:                    for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  883:                        state->deckCount[nextPlayer]++;
    #####:  884:                        state->discard[nextPlayer][i] = -1;
    #####:  885:                        state->discardCount[nextPlayer]--;
    #####:  886:                    }
        -:  887:
    #####:  888:                    shuffle(nextPlayer, state);//Shuffle the deck
    #####:  889:                }
    #####:  890:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  891:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  892:                state->deckCount[nextPlayer]--;
    #####:  893:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  894:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  895:                state->deckCount[nextPlayer]--;
        -:  896:            }
        -:  897:
    #####:  898:            if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  899:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  900:                state->playedCardCount++;
    #####:  901:                tributeRevealedCards[1] = -1;
    #####:  902:            }
        -:  903:
    #####:  904:            for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  905:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  906:                    tributeRevealedCards[i] == gold) {//Treasure cards
    #####:  907:                    state->coins += 2;
    #####:  908:                }
        -:  909:
    #####:  910:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  911:                         tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  912:                         tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####:  913:                    drawCard(currentPlayer, state);
    #####:  914:                    drawCard(currentPlayer, state);
    #####:  915:                }
        -:  916:                else {//Action Card
    #####:  917:                    state->numActions = state->numActions + 2;
        -:  918:                }
    #####:  919:            }
        -:  920:
    #####:  921:            return 0;
        -:  922:
        -:  923:        case ambassador:
    #####:  924:            j = 0;        //used to check if player has enough cards to discard
        -:  925:
    #####:  926:            if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  927:                return -1;
        -:  928:            }
        -:  929:
    #####:  930:            if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  931:                return -1;
        -:  932:            }
        -:  933:
    #####:  934:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  935:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  936:                    j++;
    #####:  937:                }
    #####:  938:            }
    #####:  939:            if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  940:                return -1;
        -:  941:            }
        -:  942:
        -:  943:            if (DEBUG)
        -:  944:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  945:
        -:  946:            //increase supply count for choosen card by amount being discarded
    #####:  947:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  948:
        -:  949:            //each other player gains a copy of revealed card
    #####:  950:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  951:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  952:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  953:                }
    #####:  954:            }
        -:  955:
        -:  956:            //discard played card from hand
    #####:  957:            discardCard(handPos, currentPlayer, state, 0);
        -:  958:
        -:  959:            //trash copies of cards returned to supply
    #####:  960:            for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  961:                for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  962:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  963:                        discardCard(i, currentPlayer, state, 1);
    #####:  964:                        break;
        -:  965:                    }
    #####:  966:                }
    #####:  967:            }
        -:  968:
    #####:  969:            return 0;
        -:  970:
        -:  971:        case cutpurse:
        -:  972:
    #####:  973:            updateCoins(currentPlayer, state, 2);
    #####:  974:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  975:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  976:                    for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  977:                        if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  978:                            discardCard(j, i, state, 0);
    #####:  979:                            break;
        -:  980:                        }
    #####:  981:                        if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  982:                            for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  983:                                if (DEBUG)
        -:  984:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  985:                            }
    #####:  986:                            break;
        -:  987:                        }
    #####:  988:                    }
        -:  989:
    #####:  990:                }
        -:  991:
    #####:  992:            }
        -:  993:
        -:  994:            //discard played card from hand
    #####:  995:            discardCard(handPos, currentPlayer, state, 0);
        -:  996:
    #####:  997:            return 0;
        -:  998:
        -:  999:
        -: 1000:        case embargo:
        -: 1001:            //+2 Coins
    #####: 1002:            state->coins = state->coins + 2;
        -: 1003:
        -: 1004:            //see if selected pile is in play
    #####: 1005:            if (state->supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1006:                return -1;
        -: 1007:            }
        -: 1008:
        -: 1009:            //add embargo token to selected supply pile
    #####: 1010:            state->embargoTokens[choice1]++;
        -: 1011:
        -: 1012:            //trash card
    #####: 1013:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1014:            return 0;
        -: 1015:
        -: 1016:        case outpost:
        -: 1017:            //set outpost flag
    #####: 1018:            state->outpostPlayed++;
        -: 1019:
        -: 1020:            //discard card
    #####: 1021:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1022:            return 0;
        -: 1023:
        -: 1024:        case salvager:
        -: 1025:            //+1 buy
    #####: 1026:            state->numBuys++;
        -: 1027:
    #####: 1028:            if (choice1) {
branch  0 never executed
branch  1 never executed
        -: 1029:                //gain coins equal to trashed card
    #####: 1030:                state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1031:                //trash card
    #####: 1032:                discardCard(choice1, currentPlayer, state, 1);
    #####: 1033:            }
        -: 1034:
        -: 1035:            //discard card
    #####: 1036:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1037:            return 0;
        -: 1038:
        -: 1039:        case sea_hag:
    #####: 1040:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1041:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1042:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1043:                    state->deckCount[i]--;
    #####: 1044:                    state->discardCount[i]++;
    #####: 1045:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1046:                }
    #####: 1047:            }
    #####: 1048:            return 0;
        -: 1049:
        -: 1050:        case treasure_map:
        -: 1051:            //search hand for another treasure_map
    #####: 1052:            index = -1;
    #####: 1053:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1054:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1055:                    index = i;
    #####: 1056:                    break;
        -: 1057:                }
    #####: 1058:            }
    #####: 1059:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1060:                //trash both treasure cards
    #####: 1061:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1062:                discardCard(index, currentPlayer, state, 1);
        -: 1063:
        -: 1064:                //gain 4 Gold cards
    #####: 1065:                for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1066:                    gainCard(gold, state, 1, currentPlayer);
    #####: 1067:                }
        -: 1068:
        -: 1069:                //return success
    #####: 1070:                return 1;
        -: 1071:            }
        -: 1072:
        -: 1073:            //no second treasure_map found in hand
    #####: 1074:            return -1;
        -: 1075:    }
        -: 1076:
    #####: 1077:    return -1;
      150: 1078:}
        -: 1079:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1080:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1081:
        -: 1082:    //if card is not trashed, added to Played pile
    #####: 1083:    if (trashFlag < 1) {
branch  0 never executed
branch  1 never executed
        -: 1084:        //add card to played pile
    #####: 1085:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1086:        state->playedCardCount++;
    #####: 1087:    }
        -: 1088:
        -: 1089:    //set played card to -1
    #####: 1090:    state->hand[currentPlayer][handPos] = -1;
        -: 1091:
        -: 1092:    //remove card from player's hand
    #####: 1093:    if (handPos == (state->handCount[currentPlayer] - 1))    //last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1094:    {
        -: 1095:        //reduce number of cards in hand
    #####: 1096:        state->handCount[currentPlayer]--;
    #####: 1097:    }
    #####: 1098:    else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1099:    {
        -: 1100:        //reduce number of cards in hand
    #####: 1101:        state->handCount[currentPlayer]--;
    #####: 1102:    }
        -: 1103:    else {
        -: 1104:        //replace discarded card with last card in hand
    #####: 1105:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1106:        //set last card to -1
    #####: 1107:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1108:        //reduce number of cards in hand
    #####: 1109:        state->handCount[currentPlayer]--;
        -: 1110:    }
        -: 1111:
    #####: 1112:    return 0;
        -: 1113:}
        -: 1114:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1115:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1116:    //Note: supplyPos is enum of choosen card
        -: 1117:
        -: 1118:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1119:    if (supplyCount(supplyPos, state) < 1) {
branch  0 never executed
branch  1 never executed
    #####: 1120:        return -1;
        -: 1121:    }
        -: 1122:
        -: 1123:    //added card for [whoseTurn] current player:
        -: 1124:    // toFlag = 0 : add to discard
        -: 1125:    // toFlag = 1 : add to deck
        -: 1126:    // toFlag = 2 : add to hand
        -: 1127:
    #####: 1128:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1129:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1130:        state->deckCount[player]++;
    #####: 1131:    }
    #####: 1132:    else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1133:        state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1134:        state->handCount[player]++;
    #####: 1135:    }
        -: 1136:    else {
    #####: 1137:        state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1138:        state->discardCount[player]++;
        -: 1139:    }
        -: 1140:
        -: 1141:    //decrease number in supply pile
    #####: 1142:    state->supplyCount[supplyPos]--;
        -: 1143:
    #####: 1144:    return 0;
    #####: 1145:}
        -: 1146:
function updateCoins called 50 returned 100% blocks executed 85%
        -: 1147:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1148:    int i;
        -: 1149:
        -: 1150:    //reset coin count
       50: 1151:    state->coins = 0;
        -: 1152:
        -: 1153:    //add coins for each Treasure card in player's hand
      600: 1154:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17%
      250: 1155:        if (state->hand[player][i] == copper) {
branch  0 taken 76%
branch  1 taken 24%
      189: 1156:            state->coins += 1;
      189: 1157:        }
       61: 1158:        else if (state->hand[player][i] == silver) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1159:            state->coins += 2;
    #####: 1160:        }
       61: 1161:        else if (state->hand[player][i] == gold) {
branch  0 taken 0%
branch  1 taken 100%
    #####: 1162:            state->coins += 3;
    #####: 1163:        }
      250: 1164:    }
        -: 1165:
        -: 1166:    //add bonus
       50: 1167:    state->coins += bonus;
        -: 1168:
       50: 1169:    return 0;
        -: 1170:}
        -: 1171:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1172:int playSmithy(struct gameState *state, int handPos) {
        -: 1173:    int i;
    #####: 1174:    int currentPlayer = state->whoseTurn;
    #####: 1175:    for (i = 0; i < 3; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1176:        drawCard(currentPlayer, state);
    #####: 1177:    }
    #####: 1178:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1179:    return 0;
        -: 1180:}
        -: 1181:
function playAdventurer called 150 returned 100% blocks executed 100%
        -: 1182:int playAdventurer(struct gameState *state) {
      150: 1183:    int drawntreasure = 0;
      150: 1184:    int z = 0;
      150: 1185:    int currentPlayer = state->whoseTurn;
        -: 1186:    int temphand[MAX_HAND];
        -: 1187:    int cardDrawn;
        -: 1188:
     2988: 1189:    while (drawntreasure < 2) {
branch  0 taken 90%
branch  1 taken 10%
     1344: 1190:        if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        1: 1191:            shuffle(currentPlayer, state);
        1: 1192:        }
     1344: 1193:        drawCard(currentPlayer, state);
     1344: 1194:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
     2537: 1195:        if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 89%
branch  1 taken 11%
branch  2 taken 12%
branch  3 taken 88%
      300: 1196:            drawntreasure++;
        -: 1197:        else {
     1044: 1198:            temphand[z] = cardDrawn;
     1044: 1199:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1044: 1200:            z++;
        -: 1201:        }
        -: 1202:    }
     2388: 1203:    while (z - 1 >= 0) {
branch  0 taken 87%
branch  1 taken 13%
     1044: 1204:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z -
        -: 1205:                                                                                       1]; // discard all cards in play that have been drawn
     1044: 1206:        z = z - 1;
        -: 1207:    }
      150: 1208:    return 0;
        -: 1209:}
        -: 1210:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1211:int playVillage(struct gameState *state, int handPos) {
    #####: 1212:    int currentPlayer = state->whoseTurn;
    #####: 1213:    drawCard(currentPlayer, state);
    #####: 1214:    state->numActions = 2;
    #####: 1215:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1216:    return 0;
        -: 1217:}
        -: 1218:
function playSteward called 0 returned 0% blocks executed 0%
        -: 1219:int playSteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos) {
    #####: 1220:    int currentPlayer = state->whoseTurn;
    #####: 1221:    if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1222:        drawCard(currentPlayer, state);
    #####: 1223:        drawCard(currentPlayer, state);
    #####: 1224:    }
    #####: 1225:    else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1226:        state->coins = state->coins + 2;
    #####: 1227:    }
        -: 1228:    else {
    #####: 1229:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1230:        discardCard(choice3, currentPlayer, state, 1);
        -: 1231:    }
    #####: 1232:    return 0;
        -: 1233:}
        -: 1234:
function playCouncil_Room called 0 returned 0% blocks executed 0%
        -: 1235:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1236:    int i;
    #####: 1237:    int currentPlayer = state->whoseTurn;
    #####: 1238:    for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1239:        drawCard(currentPlayer, state);
    #####: 1240:    }
    #####: 1241:    state->numBuys++;
    #####: 1242:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1243:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1244:            drawCard(i, state);
    #####: 1245:        }
    #####: 1246:    }
    #####: 1247:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1248:    return 0;
        -: 1249:}
        -: 1250:
        -: 1251://end of dominion.c
        -: 1252:
