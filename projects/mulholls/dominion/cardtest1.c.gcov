        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "stdlib.h"
        -:    2:#include "stdio.h"
        -:    3:#include "string.h"
        -:    4:#include "math.h"
        -:    5:#include "time.h"
        -:    6:#include "assert.h"
        -:    7:
        -:    8:#include "rngs.h"
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include "unitTestLib.h"
        -:   12:
        -:   13:void adventurerCard(struct gameState*, int, int*);
        -:   14:/* Function to Be Tested
        -:   15: *
        -:   16: * Description: This card should reveal cards until 2 treasure cards have been revealed. After, all non 
        -:   17: *    treasure cards should be discarded.
        -:   18: *
        -:   19: *    The way it works is:
        -:   20: *	 WHILE less than 2 treasures have been drawn
        -:   21: *	 IF deckCount for player is less than 1 shuffle discard into deck     //state affected - vars:deck[player]
        -:   22: *	 - Draw a card for the player					      //state affected - vars:deck[player], deckCount[player], hand[player], handCount[player]
        -:   23: *	 IF card drawn is copper, silver, or gold increment treasure count
        -:   24: *	 ELSE set card aside to discard later, decrement the handcount by 1, and increase size of temporary hand. //state affected - vars:handCount[player]
        -:   25: *	 END IF/ELSE
        -:   26: *	 END IF
        -:   27: *	 END WHILE
        -:   28: *	 WHILE One minus the temporary count > 0
        -:   29: *	 - Set the top of the discard pile equal to the card at the z-1 index in temporary hand
        -:   30: *	 - Decrement z
        -:   31: *
        -:   32: * Eval: 
        -:   33: *
        -:   34: * The shuffle function doesn't shuffle the discard back into deck. It just shuffles the deck so if deckCount < 1,
        -:   35: *    there may be an infinite loop.
        -:   36: * The "top" card of the hand has been the last card in the players hand (ie. index = handCount-1), card for comparison
        -:   37: *    won't be the right card
        -:   38: */
        -:   39:/*
        -:   40:void adventurerCard(struct gameState *state, int currentPlayer, int* temphand){
        -:   41:
        -:   42:  int drawntreasure=0;
        -:   43:  int cardDrawn;
        -:   44:  int z = 0;// this is the counter for the temp hand
        -:   45:
        -:   46:   while(drawntreasure<2){
        -:   47:      if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:   48:	 shuffle(currentPlayer, state);
        -:   49:      }
        -:   50:      drawCard(currentPlayer, state);
        -:   51:      cardDrawn = state->hand[currentPlayer][0];//top card of hand is most recently drawn card.
        -:   52:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:   53:	 drawntreasure++;
        -:   54:      else{
        -:   55:	 temphand[z]=cardDrawn;
        -:   56:	 state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:   57:	 z++;
        -:   58:      }
        -:   59:   }
        -:   60:
        -:   61:   while(z-1>=0){
        -:   62:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:   63:      z=z-1;
        -:   64:   }
        -:   65:   return;
        -:   66:}
        -:   67:*/
function basicTest called 1 returned 100% blocks executed 71%
        1:   68:int basicTest(struct gameState* state){
        -:   69:
        1:   70:   int* tempHand = malloc(MAX_HAND * sizeof(int));
        1:   71:   memset(tempHand, 0, MAX_HAND * sizeof(int));
        -:   72:
        1:   73:   state->numPlayers = 2;
        1:   74:   state->deckCount[0] = 27;
        -:   75:
        -:   76:   int i;
        -:   77:   //Deck should include at one copper, one silver, and one gold to be found
       28:   78:   for(i = 0;  i < state->deckCount[0]; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:   79:      state->deck[0][i] = gardens;
       27:   80:      if(i > 4 && i < 8){
branch  0 taken 81% (fallthrough)
branch  1 taken 19%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        3:   81:    	  state->deck[0][i] = copper;
        -:   82:      }
        -:   83:   }
        1:   84:   state->handCount[0] = 5;
        6:   85:   for(i = 0;  i < state->handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   86:      state->hand[0][i] = copper;
        -:   87:   }
        1:   88:   state->discardCount[0] = 10;
       11:   89:   for(i = 0;  i < state->discardCount[0]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   90:      state->discard[0][i] = i;
        -:   91:   }
        -:   92:
        1:   93:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:   94:   memcpy(cpy, state, sizeof(struct gameState));
        -:   95:
        1:   96:   adventurerCard(state, 0, tempHand);
call    0 returned 100%
        -:   97:
        -:   98:   //Only copper in Deck, so last two cards in hand must be copper
        2:   99:   if(state->hand[0][state->handCount[0]-1] != copper &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  100:	  state->hand[0][state->handCount[0]-2] != copper){
        1:  101:	   return -1;
        -:  102:   }
        -:  103:
        -:  104:   //2 new copper cards added to hand, and adventurer discarded
    #####:  105:   if(state->handCount[0] != cpy->handCount[0]+1){
branch  0 never executed
branch  1 never executed
    #####:  106:	   return -2;
        -:  107:   }
        -:  108:
        -:  109:   //Takes 5 draws to find the first copper
    #####:  110:   if(state->discardCount[0] != cpy->discardCount[0]+5){
branch  0 never executed
branch  1 never executed
    #####:  111:	   return -3;
        -:  112:   }
        -:  113:   //Wrong card discarded, only copper and gardens in deck
    #####:  114:   if(state->discard[0][state->discardCount[0]-1] != gardens){
branch  0 never executed
branch  1 never executed
    #####:  115:	   return -4;
        -:  116:   }
        -:  117:
        -:  118:   //Card should exit normally as expected
    #####:  119:   free(tempHand);
    #####:  120:   return 0;
        -:  121:}
        -:  122:
        -:  123://Corrects a state difference in state by matching to cpy's state
        -:  124://Returns the unitTestLib code for which state variable was affected.
function _stateTestHelper called 4 returned 100% blocks executed 42%
        4:  125:int _stateTestHelper(struct gameState* state, struct gameState* cpy, int i){
        -:  126:   int j;
        4:  127:   int retVal = abs(checkState(cpy, state));
call    0 returned 100%
        4:  128:   switch (retVal){
branch  0 taken 25%
branch  1 taken 25%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 25%
        -:  129:
        -:  130:     case 11:
      501:  131:		 for(j = 0; j < MAX_HAND; j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:  132:			state->hand[i][j] = cpy->hand[i][j];
        -:  133:		 }
        1:  134:		 return 11;
        -:  135:
        -:  136:     case 12:
        1:  137:		 state->handCount[i] = cpy->handCount[i];
        1:  138:		 return 12;
        -:  139:
        -:  140:     case 13:
    #####:  141:		 for(j = 0; j < MAX_DECK; j++){
branch  0 never executed
branch  1 never executed
    #####:  142:			state->discard[i][j] = cpy->discard[i][j];
        -:  143:		 }
    #####:  144:		 return 13;
        -:  145:
        -:  146:     case 14:
    #####:  147:		 state->discardCount[i] = cpy->discardCount[i];
    #####:  148:		 return 14;
        -:  149:
        -:  150:     case 15:
    #####:  151:    	  for(j = 0; j < MAX_DECK; j++){
branch  0 never executed
branch  1 never executed
    #####:  152:    		  state->playedCards[j] = cpy->playedCards[j];
        -:  153:    	  }
    #####:  154:		 return 15;
        -:  155:
        -:  156:     case 16:
    #####:  157:		 state->playedCardCount = cpy->playedCardCount;
    #####:  158:		 return 16;
        -:  159:
        -:  160:     case 17:
        1:  161:    	 state->deckCount[i] = cpy->deckCount[i];
        1:  162:    	 return 17;
        -:  163:
        -:  164:     case 18:
        -:  165:
    #####:  166:		 for(j = 0; j < MAX_DECK; j++){
branch  0 never executed
branch  1 never executed
    #####:  167:			 state->deck[i][j] = cpy->deck[i][j];
        -:  168:		 }
    #####:  169:		 return 18;
        -:  170:
        -:  171:      default:
        1:  172:	 if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  173:	    return retVal;
        -:  174:	 } else {
        1:  175:	    return 0;
        -:  176:	 }
        -:  177:   }
        -:  178:}
        -:  179:
function _stateTrackerChecker called 1 returned 100% blocks executed 100%
        1:  180:int _stateTrackerChecker(int* tracker){
        -:  181:   int i;
        1:  182:   int count = 0;
       20:  183:   for(i = 0; i < 19; i++){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
       19:  184:      if(tracker[i] > 0){
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        3:  185:	 count++;
        -:  186:      }
        -:  187:   }
        1:  188:   return count;
        -:  189:}
        -:  190:
function stateTest called 1 returned 100% blocks executed 86%
        1:  191:int stateTest(struct gameState* state, int expectedStateChanges){
        -:  192:
        1:  193:   int* tempHand = malloc(MAX_HAND * sizeof(int));
        1:  194:   memset(tempHand, 0, MAX_HAND * sizeof(int));
        -:  195:
        1:  196:   int* stateTracker = (int*)(malloc(19*sizeof(int)));
        1:  197:   memset(stateTracker, 0, 19*sizeof(int));
        -:  198:
        -:  199:   int i, retVal;
        -:  200:
        1:  201:   state->numPlayers = 2;
        1:  202:   state->deckCount[0] = 27;
        -:  203:
        -:  204:   //Deck should include at one copper, one silver, and one gold to be found
       28:  205:   for(i = 0;  i < state->deckCount[0]; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:  206:      state->deck[0][i] = i;
        -:  207:   }
        1:  208:   state->handCount[0] = 5;
        -:  209:
        -:  210:   //Fill hand with copper
        6:  211:   for(i = 0;  i < state->handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  212:      state->hand[0][i] = copper;  //<-------CAUSES ENDLESS LOOP IF hand[0] != treasure
        -:  213:   }
        1:  214:   state->discardCount[0] = 10;
       11:  215:   for(i = 0;  i < state->discardCount[0]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  216:      state->discard[0][i] = i;
        -:  217:   }
        -:  218:
        1:  219:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:  220:   memcpy(cpy, state, sizeof(struct gameState));
        -:  221:
        1:  222:   adventurerCard(state, 0, tempHand);
call    0 returned 100%
        -:  223:   do{
        -:  224:
        4:  225:      retVal = _stateTestHelper(state, cpy, 0);
call    0 returned 100%
        4:  226:      if(retVal){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  227:    	  stateTracker[retVal]++;
        3:  228:    	  if(stateTracker[retVal] > 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  229:    		  printf("stateTest %i: Can't Clear State Error\n", retVal);
call    0 never executed
    #####:  230:    		  return -retVal;
        -:  231:    	  }
        -:  232:      }
        4:  233:   } while (retVal);
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  234:
        1:  235:   int sc = _stateTrackerChecker(stateTracker);
call    0 returned 100%
        -:  236:
        1:  237:   if(sc != expectedStateChanges){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  238:	   printf("stateTest -1: State error, %i Extra Changes\n", sc-expectedStateChanges);
call    0 returned 100%
        1:  239:	   return -1;
        -:  240:   }
    #####:  241:   free(stateTracker);
    #####:  242:   free(cpy);
    #####:  243:   free(tempHand);
    #####:  244:   return 0;
        -:  245:}
        -:  246:
function discardTest called 1 returned 100% blocks executed 93%
        1:  247:int discardTest(struct gameState* state){
        -:  248:
        1:  249:   int* tempHand = malloc(MAX_HAND * sizeof(int));
        1:  250:   memset(tempHand, 0, MAX_HAND * sizeof(int));
        -:  251:
        1:  252:   state->numPlayers = 2;
        1:  253:   state->deckCount[0] = 27;
        -:  254:
        -:  255:   int i;
        -:  256:   //Deck should include at one copper, one silver, and one gold to be found
       28:  257:   for(i = 0;  i < state->deckCount[0]; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:  258:      state->deck[0][i] = i;
        -:  259:   }
        1:  260:   state->handCount[0] = 5;
        6:  261:   for(i = 5;  i < 5 + state->handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  262:      state->hand[0][i-5] = i;
        -:  263:   }
        1:  264:   state->discardCount[0] = 10;
       11:  265:   for(i = 0;  i < state->discardCount[0]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  266:      state->discard[0][i] = i;
        -:  267:   }
        -:  268:
        1:  269:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:  270:   memcpy(cpy, state, sizeof(struct gameState));
        -:  271:
        1:  272:   adventurerCard(state, 0, tempHand);
call    0 returned 100%
        1:  273:   if(state->discardCount[0] != cpy->discardCount[0]+1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  274:	   free(cpy);
        1:  275:	   free(tempHand);
        1:  276:	   return -1;
        -:  277:   }
        -:  278:   //Card should exit normally as expected
    #####:  279:   free(cpy);
    #####:  280:   free(tempHand);
    #####:  281:   return 0;
        -:  282:}
        -:  283:
function noTreasureInDeckOrDiscardTest called 1 returned 100% blocks executed 100%
        1:  284:int noTreasureInDeckOrDiscardTest(struct gameState* state){
        -:  285:
        1:  286:   int* tempHand = malloc(MAX_HAND * sizeof(int));
        1:  287:   memset(tempHand, 0, MAX_HAND * sizeof(int));
        -:  288:
        1:  289:   state->numPlayers = 2;
        1:  290:   state->deckCount[0] = 5;
        -:  291:
        -:  292:   int i;
        6:  293:   for(i = 0;  i < state->deckCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  294:      state->deck[0][i] = 10;
        -:  295:   }
        1:  296:   state->handCount[0] = 5;
        6:  297:   for(i = 0;  i < state->handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  298:      state->hand[0][i] = 5;
        -:  299:   }
        1:  300:   state->discardCount[0] = 5;
        6:  301:   for(i = 0;  i < state->discardCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  302:      state->discard[0][i] = 10;
        -:  303:   }
        -:  304:
        1:  305:   adventurerCard(state, 0, tempHand);
call    0 returned 100%
        -:  306:   //Game should enter infinite loop with no treasure in deck or discard
        1:  307:   free(tempHand);
        1:  308:   return 0;
        -:  309:}
        -:  310:
function noCardsInDeckTest called 1 returned 100% blocks executed 92%
        1:  311:int noCardsInDeckTest(struct gameState* state){
        -:  312:
        1:  313:   int* tempHand = malloc(MAX_HAND * sizeof(int));
        1:  314:   memset(tempHand, 0, MAX_HAND * sizeof(int));
        -:  315:
        1:  316:   state->numPlayers = 2;
        1:  317:   state->deckCount[0] = 0;
        1:  318:   state->handCount[0] = 5;
        1:  319:   state->discardCount[0] = 5;
        -:  320:
        -:  321:   int i;
        1:  322:   for(i = 0;  i < state->deckCount[0]; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  323:      state->deck[0][i] = 10;
        -:  324:   }
        -:  325:
        6:  326:   for(i = 0;  i < state->handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  327:      state->hand[0][i] = 5;
        -:  328:   }
        -:  329:
        6:  330:   for(i = 0;  i < state->discardCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  331:      state->discard[0][i] = 10;
        -:  332:   }
        -:  333:
        1:  334:   adventurerCard(state, 0, tempHand);
call    0 returned 100%
        -:  335:   //Game should enter infinite loop with no treasure in deck or discard
        1:  336:   free(tempHand);
        1:  337:   return 0;
        -:  338:}
        -:  339:
function unitTest called 1 returned 100% blocks executed 82%
        1:  340:int unitTest(){
        -:  341:
        1:  342:   printf("\n+--------------------------------ADVENTURER CARD TEST----------------------------+\n");
call    0 returned 100%
        -:  343:   //Create Zeroed Gamestate;
        1:  344:   struct gameState* testState = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:  345:   memset(testState, 0, sizeof(struct gameState));
        1:  346:   int retVal = 0;
        -:  347:
        1:  348:   printf("\n+------basicTest------+\n\n");
call    0 returned 100%
        1:  349:   retVal = basicTest(testState);
call    0 returned 100%
        1:  350:   if(retVal != 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  351:      printf("basicTest -1: Test Failed, \n");
call    0 returned 100%
        -:  352:   } else {
    #####:  353:      printf("basicTest: Successful\n");
call    0 never executed
        -:  354:   }
        1:  355:   memset(testState, 0, sizeof(struct gameState));
        -:  356:
        1:  357:   printf("\n+--------stateTest----------+\n\n");
call    0 returned 100%
        -:  358:   //Checks to ensure no values in current state are changed after function
        1:  359:   retVal = stateTest(testState, 8);// Expected: hand, handCount, deck, deckCount, discard, discardCount, played, playedCount
call    0 returned 100%
        1:  360:   if(retVal){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  361:	   printf("stateTest %i: Failed State Test\n", retVal);
call    0 returned 100%
        -:  362:	   //return -3;
        -:  363:   } else {
    #####:  364:		   printf("stateTest: Successful\n");
call    0 never executed
        -:  365:   }
        -:  366:   
        1:  367:   printf("\n+--------discardTest----------+\n\n");
call    0 returned 100%
        -:  368:   //Checks to ensure Adventurer Card is Discarded
        1:  369:   retVal = discardTest(testState);
call    0 returned 100%
        1:  370:   if(retVal){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  371:	   printf("discardTest %i: Failed Discard Test\n", retVal);
call    0 returned 100%
        -:  372:	   //return -3;
        -:  373:   } else {
    #####:  374:		   printf("discardTest: Successful\n");
call    0 never executed
        -:  375:   }
        -:  376:
        1:  377:   printf("\n+------noTreasureInDeckOrDiscardTest------+\n\n");
call    0 returned 100%
        1:  378:   retVal = noTreasureInDeckOrDiscardTest(testState);
call    0 returned 100%
        1:  379:   if(retVal == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  380:      printf("noTresureInDeckOrDiscardTest -1: Test Failed, Card Found Non Existent Treasures\n");
call    0 returned 100%
        -:  381:   } else {
    #####:  382:      printf("noTreasureInDeckOrDiscardTest: Successful\n");
call    0 never executed
        -:  383:   }
        1:  384:   memset(testState, 0, sizeof(struct gameState));
        -:  385:
        1:  386:   printf("\n+------noCardsInDeckTest------+\n\n");
call    0 returned 100%
        1:  387:    retVal = noCardsInDeckTest(testState);
call    0 returned 100%
        1:  388:    if(retVal == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  389:       printf("noCardsInDeckTest -1: Test Failed, Treasure Found When Deck Empty\n");
call    0 returned 100%
        -:  390:    } else {
    #####:  391:       printf("noCardsInDeckTest: Successful\n");
call    0 never executed
        -:  392:    }
        -:  393:
        1:  394:   free(testState);
        1:  395:   return retVal;
        -:  396:}
        -:  397:
function main called 1 returned 100% blocks executed 100%
        1:  398:int main(){
        1:  399:   int testVal = unitTest();
call    0 returned 100%
        1:  400:   printf("Outcome: %i\n", testVal);
call    0 returned 100%
        1:  401:   return testVal;
        -:  402:}
        -:  403:
        -:  404:
